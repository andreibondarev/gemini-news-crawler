<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Kevin Randles on Medium]]></title>
        <description><![CDATA[Stories by Kevin Randles on Medium]]></description>
        <link>https://medium.com/@krandles?source=rss-d451d084d34a------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*KdLQhGeQN1TiFgdXpcy0jg.jpeg</url>
            <title>Stories by Kevin Randles on Medium</title>
            <link>https://medium.com/@krandles?source=rss-d451d084d34a------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sun, 12 May 2024 16:51:32 GMT</lastBuildDate>
        <atom:link href="https://medium.com/@krandles/feed" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Adding Dynamic Themes to a React App Using CSS Variables]]></title>
            <link>https://medium.com/@krandles/adding-dynamic-themes-to-a-react-app-using-css-variables-57957e39f0bf?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/57957e39f0bf</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[react]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Mon, 16 Jul 2018 01:31:38 GMT</pubDate>
            <atom:updated>2018-07-16T17:13:18.460Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*fs8nbqkBTn8YITMj4IrzvQ.png" /></figure><p>I’ve been working on <a href="https://kevinrandles.com/">my portfolio website</a> this weekend, and finally implemented a feature I’ve been thinking about for a few weeks — multiple color themes! Inspired by a blog post I read recently (and encouraged by the fact that, as much as I like the color palette above, I’ve spent quite a few hours looking at it), adding themes seemed like a good way to get some practice using Javascript to manipulate CSS properties and add a little bit of flash to what is, for now, one of the best showcases of my skills.</p><p>First things first, I updated my app’s CSS, replacing all of my color properties with CSS variables which I defined (for now) in a “body” selector.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/424/1*-3xADG7q6D37hEeTjfOEJQ.png" /></figure><p>With my colors all now nicely defined in one place, instead of 20 or 30 different places spread throughout my CSS, it was time to decide just how to implement this new feature. My initial thought was that I’d use React refs, grabbing the top level element of my App with a ref and setting style properties on it, but since I’m looking to set properties/variables that will apply document-wide, the solution turned out to be even simpler than that — <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/body">document.body</a>.</p><p>Document.body returns the &lt;body&gt; node of the current document, allowing us to manipulate it with Javascript, giving us access to the style.setProperty() method, which takes two arguments — the name of the property to set, and the value to which we want to set it. To test this out, I added a componentDidMount() method to my page’s top-level component.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/579/1*f77cv-iFBpL63yKaMaTKkg.png" /></figure><p>…and, voila…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WaH8J1M0nrQcDdZqR6Seqw.png" /></figure><p>Upon loading the page, the CSS variable setting the background color is changed to black, and I was pleasantly surprised to see it doesn’t look bad…needs work, but I like the combo of black with that shade of green.</p><p>With a method for manipulating my CSS variables determined, I set about making my app able to change them with the click of a button. First, adding a few key/value pairs to my state (the theme colors will eventually be defined in another file, since they don’t really belong in the state, but this works for the moment) — the currently selected theme’s name, and the variables for my first two themes.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/443/1*fjVsn1tt7jblEluJIL1r7A.png" /></figure><p>Next, I wrote a function that iterates over the object that corresponds to the currently selected theme, and sets the CSS variables to their intended values.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/526/1*64-cIjj3JNNnXJhPxHntiw.png" /></figure><p>And another, that toggles the state back and forth between my two themes, depending on which is currently selected, and calls setTheme() to apply the newly changed theme.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/405/1*XX9q4oCm5444wDy2TTgFPQ.png" /></figure><p>This isn’t really the ideal way to go about it (calling setTheme should be done in ComponentDidUpdate()), but by this point I’ve been coding all day long and that can wait until tomorrow —time to find out if this works. A bit of messing about with my page’s footer to add a button with an onClick handler pointed to toggleTheme() and…success!</p><p>I’ve got a minor bug to squash — for some reason, the button doesn’t change the theme the first time it’s clicked — and some refactoring to do, but I’m happy with the results so far and dinner calls. Not ready for deployment yet, but the code is committed and pushed to Github, check it out <a href="https://github.com/krandles/kevinrandles-dot-com">here</a>!</p><h3>Update!</h3><p>After a good night’s sleep and a few minutes of refactoring, I’m much happier with my work on this feature (bonus! the bug I mentioned above was fixed in the process). My lifecycle methods now looks like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/527/1*Y8twR59Iwi3pLNWm-1S4lQ.png" /></figure><p>The setTheme() function is called on initial render, and I use componentDidUpdate() to to check if currentTheme changed at every state change. If so, setTheme() is called to push the currently selected theme’s colors to the DOM. With setTheme() being called when necessary from the component’s lifecycle methods, I was able to refactor toggleTheme(), removing the callback from its calls to setState().</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/405/1*HaYUSQr8d_bGv1xw4_DVOA.png" /></figure><p>Cleaner, clearer, and in line with the React way of doing things, the basic version of this feature is complete…now to come up with some more color palettes. My plan for this feature is for it to eventually select a random theme on page load, and implement a theme selector component instead of just a single clickable icon to switch themes….back to work.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=57957e39f0bf" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Validating Forms in Semantic UI React]]></title>
            <link>https://medium.com/@krandles/validating-forms-in-semantic-ui-react-a057957f1dd6?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/a057957f1dd6</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[semantic-ui]]></category>
            <category><![CDATA[react]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Mon, 09 Jul 2018 03:44:42 GMT</pubDate>
            <atom:updated>2018-08-12T01:08:18.386Z</atom:updated>
            <content:encoded><![CDATA[<p>I’ve been working recently on fleshing out <a href="https://tapped.kevinrandles.com/">the app I built</a> for my final project at Flatiron School, and thought I’d share some of what I learned over the last few days while adding validation to the forms that make up a significant part of this app. In order to build the initial version of this app in a relatively short time, I used the <a href="https://react.semantic-ui.com/introduction">React version of Semantic UI</a>, which provided me with clean, responsive styling without having to put too much time into rolling my own CSS. Unlike the original jQuery-based version of Semantic UI, which has <a href="https://semantic-ui.com/behaviors/form.html">built-in form validation support</a>, Semantic UI React requires you to write your own validation methods — thankfully, this isn’t particularly difficult.</p><p>After a little bit of Googling, I found <a href="https://stackoverflow.com/a/46290968">this great answer</a> at Stack Overflow that got me pointed in the right direction, and got started with the part of my app that every user will encounter first, the new user signup form.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/837/1*OMy8fvaKb1Ls20wAjlqTzA.png" /></figure><p>My first step was to add a disabled prop to the submit button, which checks to make sure that all of the required fields (in this case, all of them) are filled out with some value, valid or not, before enabling the button — most of the validation will be carried out when a user attempts to submit the form.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/343/1*C73YQYY8PM-sYRGgierd7g.png" /></figure><p>This simply checks the part of the form’s state that corresponds to each field, and returns a boolean value of false, thereby enabling the button, when all of the fields are filled.</p><p>Next, I added a bunch of new key-value pairs to the forms initial state, all set to false, to keep track of any errors that come up when attempting to submit the form.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/354/1*vjdiHpZ_uqqT5aOg60-Exw.png" /></figure><p>Then, on each individual form field, I added an error prop, checking for the errors which apply to that field, which will put the field into an error state if the entered data is invalid.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/592/1*NYaUSGRYR6qP3QOuatuj2w.png" /></figure><p>All pretty straightforward so far, right? But where the real work gets done is in the method that handles submitting the form to the back end. This method is about 80 lines long right now, so I’ll spare you the wall of code and just cover the basics of what I had to add to the existing method.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/403/1*bSsETckmhetcV8afYLR0tg.png" /></figure><p>First, I declared an “error” variable, set to false, that will track the global error state of the form — if any errors are found this will be set to true, and prevent submission of invalid data to the back end (I’ll show the code that manages this down below).</p><p>Then, for each possible error I want to check for, I wrote an if/else statement. The examples above check for the presence of a value in the email field (this should, ideally, also be checking to make sure that it’s in a valid email format-TODO: find a regExp that does that), and that the entered password is at least 8 characters long. I’ve got another half dozen or so of these, checking that the password and confirm password fields match, that the entered ZIP code is a 5-digit number, etc., etc.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/373/1*SRu3SgkpUGbQadfRvKriHQ.png" /></figure><p>After all of the validation checks are complete, we check to see if “error” has been set to true. If it has, we set formError in our state to true, then “return” to end execution of the method — the return here is critical, as it prevents the rest of the handleSubmit method from executing, and submitting what we already know to be invalid data to the back end. If no errors were found, we set formError to false, and continue with creating the new user account.</p><p>We’re almost finished here, but there’s one potential case that could, even if everything looks correct, prevent our new user from being created, that we can’t account for until we actually attempt to create the new user— what if the user already has an account?</p><p>I won’t go fully into how I implemented checking for this, as it involved adding some code to my reducer and my API call for creating a user (and the way I implemented it feels a little hack-y, if I’m being completely honest-but it does the job for now). Essentially, if the server’s response to the POST request is an error, instead of the expected JSON object, (and because I’ve implemented robust validation to make sure no potentially invalid data will be submitted) the action returned by our reducer will not contain a payload, so I check for this like so:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/341/1*ntx4r6ruqZ8b1csybasr6Q.png" /></figure><p>I have one final bit of code to show here, which deals with providing detailed feedback to the user about what they’ve done wrong.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/561/1*3kUxoeQze8JwQ3vrGtZAog.png" /></figure><p>I’ve added a ternary statement here which renders an error message on the form if createUserError is true.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/837/1*rWNB3UDTysUJm3ZqR18MnQ.png" /></figure><p>And so, there you have it…relatively comprehensive validation on a Semantic UI React form. This still needs some work, in order to provide more detailed feedback on other error cases, but I need to refactor my form layout to comfortably fit multiple error messages on screen (TODO: one more thing on a really long list), and it isn’t really comprehensive without server side validation as well, which I wrote about implementing in Rails <a href="https://medium.com/@krandles/active-record-validations-890519b94fe7">here</a> a few months back.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a057957f1dd6" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thinking About CSS, Part 2 — Preprocessors]]></title>
            <link>https://medium.com/@krandles/thinking-about-css-part-2-preprocessors-1696472c9229?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/1696472c9229</guid>
            <category><![CDATA[less]]></category>
            <category><![CDATA[sass]]></category>
            <category><![CDATA[css]]></category>
            <category><![CDATA[css-preprocessors]]></category>
            <category><![CDATA[stylus]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Mon, 25 Jun 2018 04:15:07 GMT</pubDate>
            <atom:updated>2018-06-25T04:15:07.164Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yQMlZSgr9xhSLAha_XMHIA.png" /></figure><p>To follow my <a href="https://medium.com/@krandles/thinking-about-css-with-react-b444e2ab91f6">last post</a>, about some of the different ways CSS styles can be defined in the context of a React web app, I wanted to look at some of the ways the basic feature set of CSS can be expanded upon using CSS preprocessors. For those who might not be familiar with the concept, a CSS preprocessor allows you to define selectors and styles using features that aren’t part of CSS syntax, that are compiled by the preprocessor into something your browser can understand, much like Babel allows you to write JavaScript using features that aren’t yet supported by browsers.</p><p>Many of the features provided by CSS preprocessors are shared by most of them, with minor differences in syntax, and I’ll discuss some of the more useful features below, but first, a brief overview of some of the most commonly used preprocessors.</p><h3>Sass</h3><p>Sass (Syntactically Awesome Style Sheets), created in 2006 and perhaps the most popular preprocessor, is written in Ruby and can be compiled server-side to valid CSS but, with the capabilities provided to us by tools such as Webpack, is more commonly compiled by your toolchain with the resulting CSS integrated into your build.</p><h3>Less</h3><p>Less (Leaner Style Sheets), described by its creators as “CSS, with just a little more”, is written in JavaScript and can be compiled at run time by the browser or the server to CSS or, as with Sass, compiled at build time by your toolchain. Less is backwards-compatible with CSS and shares the same syntax, so any valid CSS stylesheet is also a valid Less stylesheet.</p><h3>Stylus</h3><p>Stylus is a bit more than a simple preprocessor — it’s a language, written in JavaScript and running on Nodejs, that generates CSS. Offering built-in functions, support for conditionals and logical operators, and a whole host of other features, Stylus supports standard CSS syntax but also supports a much more terse syntax, allowing you to optionally leave out colons, semicolons, and braces in your stylesheets.</p><p>There are quite a few <a href="https://www.slant.co/topics/217/~best-css-preprocessors-postprocessors">other options</a> available for CSS preprocessing, but these three are by far the most widely used and well documented. So, now that we know a little about the most popular CSS preprocessors, what exactly do we get from them?</p><h3>Variables</h3><pre>// defining variables</pre><pre>$blue: #00f // Sass syntax<br>@blue: #00f // Less syntax<br>blue = #00f // Stylus syntax<br>--blue: #00f // CSS custom properties syntax</pre><pre>// using a variable in Sass</pre><pre>h1 {<br>  color: $blue<br>}</pre><p>Variables in CSS are no longer exclusive to preprocessors, having recently been added to native CSS where they’re known as custom properties, allowing for some <a href="https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care">very powerful functionality</a>, and perhaps eliminating one of the best arguments for using a preprocessor. As you might’ve guessed, variables allow you to assign a value to a property with a name of your choice, and refer to that property by its variable name elsewhere</p><h3>Mixins</h3><pre>// A mixin in Stylus, used to simplify setting vendor prefixes</pre><pre>border-radius() {<br>  -webkit-border-radius: arguments<br>  -moz-border-radius: arguments<br>  border-radius: arguments<br>}</pre><pre>form input {<br>  padding: 5px;<br>  border: 1px solid;<br>  border-radius: 5px;<br>}</pre><p>Mixins allow you to define a set of CSS properties which can then be “mixed-in” with the properties defined under another selector, potentially saving a lot of time and effort if you need to apply the same properties in a number of different locations.</p><h3>Nested Selectors</h3><pre>// A nested selector in Less</pre><pre>.component {<br>  width: 300px;<br>  @media (min-width: 768px) {<br>    width: 600px;<br>    @media (min-resolution: 192dpi) {<br>      background-image: url(/img/retina2x.png);<br>    }<br>  } @media (min-width: 1280px) {<br>    width: 800px;<br>  }<br>}</pre><p>Nested selectors, as the name indicates, allow you to nest selectors within one another, allowing you to write much more concise CSS. The above selector, written without nesting, would require 5 separate selectors, and nearly twice as many lines. They also allow for more logical organization, letting you group all of the properties for the element you’re styling together, instead of potentially spreading them out over many areas of your stylesheet, as is commonly done when working on a responsive design.</p><p>So should you be using a CSS preprocessor? These are just a few of the many benefits afforded by adding one to your workflow, and whether it’s worthwhile to you probably depends on the scope of your project and the other technologies you’re working with. Most of the alternative methods for implementing styles in React apps that I explored in my last post might not integrate easily with these tools, or might render the benefits offered by them unnecessary, or less useful than they would otherwise be.</p><p><a href="http://lesscss.org/">Less Documentation</a></p><p><a href="https://sass-lang.com/guide">Sass Documentation</a></p><p><a href="http://stylus-lang.com/">Stylus Documentation</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1696472c9229" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thinking About CSS (with React)]]></title>
            <link>https://medium.com/@krandles/thinking-about-css-with-react-b444e2ab91f6?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/b444e2ab91f6</guid>
            <category><![CDATA[react]]></category>
            <category><![CDATA[css]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Sun, 17 Jun 2018 02:22:15 GMT</pubDate>
            <atom:updated>2018-06-17T02:22:15.298Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/640/1*gdK__S0SyCdasscIs_1Slw.gif" /><figcaption>What, like I wasn’t gonna use this GIF?</figcaption></figure><p>CSS. You know it, you use it, you…might have a complicated relationship with it. When I first started making web apps, I looked at CSS as something of a necessary evil. I just wanted to do cool stuff with JavaScript, so I relied on frameworks — first Bootstrap, then Semantic UI — with a sprinkle of my own CSS to put things in their proper places. More recently, I’ve been building a few things aren’t well suited to to a framework, like my portfolio site, where I wanted to show off my design chops (such as they are) with something that looks a little less cookie cutter. In the process, I’ve actually come to (mostly) enjoy writing CSS, but I’m also beginning to find a need to change how I work with it.</p><p>To date, I’ve just been working with a single, monolithic .css file containing all of my selectors for a project…and that works. But my portfolio site is a responsive React single page application, with a little animation, and my App.css file is over 500 lines already — still manageable, but beginning to become unwieldy and hard to navigate. Time to find a new approach.</p><p>In this article, I’m going to briefly look at a few of the options available to write CSS, with an eye towards solutions that play well with React’s component based approach to building pages. I don’t expect to come to any conclusions about what’s best, I’d just like to be able to make a more informed decision quickly the next time I start a project.</p><h3>CSS Modules</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/616/1*3nWluiErh2MU4-4xVf_kjQ.png" /></figure><p>If you’re using a Webpack-based build process, like create-react-app provides, you can import stylesheets into your .js/.jsx file that, through the magic of Webpack, will be collected into a single .css file at build time. In terms of keeping your CSS organized, having a stylesheet dedicated to a single component is far neater, and more sensible, than searching through a wall of text for the selectors that apply to that component, but as the create-react-app docs note, this is a Webpack-specific syntax, and could be cause for concern if if you change your build process somewhere down the line.</p><h3>styled-components</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/451/1*s-0VFR5NP90oAj0hOgwjcw.png" /></figure><p>This is an interesting approach, if one that seems oriented more towards building a library of reusable components than the project-specific way of doing things that I’ve been using so far. With styled-components (install via NPM or your favorite package manager), you’re defining a component as a combination of an HTML element and the styles that apply to it, contained within a tagged template literal. Since this approach makes use of template literals, variables can be passed into the component, allowing styles to be defined via props. There’s a lot to like here, and while it’s not appropriate for every situation, I’m definitely considering using styled-components in the next big project that’s been bouncing around in my head recently.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b444e2ab91f6" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Painless File Upload And Hosting With Filestack-React]]></title>
            <link>https://medium.com/@krandles/painless-file-upload-and-hosting-with-filestack-react-ba80455d2aa7?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/ba80455d2aa7</guid>
            <category><![CDATA[flatiron-school]]></category>
            <category><![CDATA[react]]></category>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Tue, 20 Mar 2018 17:27:56 GMT</pubDate>
            <atom:updated>2018-03-20T17:27:56.529Z</atom:updated>
            <content:encoded><![CDATA[<p>One of the biggest headaches in my young career as a software developer has been figuring out the best way to allow users to upload images to a web app I was working on. My first attempt involved vanilla JS and attempting to store images directly in my back-end database…unless you absolutely need to do it this way, don’t re-invent the wheel, find another solution (we ended up uploading our files to a host and linking directly to them). Second time around, I figured “let’s try AWS S3, I see lots of sites hosting images there” — and while S3 is a perfectly valid, and probably great, solution, when you need to deliver a working site quickly, something a bit lighter in terms of configuration is called for.</p><h3>Enter Filestack</h3><p>After spending more time than I should have trying to wrap my head around S3, one of my classmates clued me in to <a href="https://github.com/filestack/filestack-react">Filestack</a> (specifically, filestack-react), which couldn’t be simpler to set up — I did it far less time than it’ll take me to write this blog post. Before you get started, you’ll need to sign up for an account at <a href="https://www.filestack.com/">filestack.com</a> in order to get an API key. It’s free to sign up for a developer plan, which includes more than enough bandwidth and uploads to see you through the development phase of a project.</p><p>Next, assuming you’ve already got a React app you’re working on, you’ll just need to install the packages with</p><pre>yarn add filestack-react filestack-js</pre><pre>or</pre><pre>npm install filestack-react filestack-js</pre><p>Once you’ve got the necessary packages installed, import Filestack into the component(s) you’ll be adding it to with</p><pre>import ReactFilestack from &#39;filestack-react&#39;</pre><p>Now we’re ready to put something on the page — the Filestack component only requires one prop , “apikey”, but it‘s not that useful without a couple more. Here’s the basic configuration I’ve been using:</p><pre>&lt;ReactFilestack<br>  apikey={keys.filestackKey}<br>  buttonText=&quot;Upload Photo&quot;<br>  buttonClass=&quot;ui medium button gray&quot;<br>  options={basicOptions}<br>  onSuccess={this.onSuccess}<br>  onError={this.onError}<br>/&gt;</pre><p>keys.filestackKey refers to the file I’m importing my key from — you could just put the key right there, but you know better than that, right? buttonText and buttonClass are purely cosmetic, setting the text on the button that opens the Filestack uploader, and in this case, assigning classes so the button matches the Semantic UI components I’m using for the rest of this form. onSuccess and onError should point to callback functions that will handle the response from Filestack:</p><pre>onSuccess = (result) =&gt; {<br>  this.setState({<br>    url: result.filesUploaded[0].url<br>  })<br>}</pre><pre>onError = (error) =&gt; {<br>  console.error(&#39;error&#39;, error);<br>}</pre><p>The onSuccess function here is just storing the URL returned from Filestack to the component’s state, which will be saved to my database when the form is submitted. onError is just sending any potential error messages to the console…handle your errors however you see fit.</p><p>Finally, the options prop takes an Object with, yep, you guessed it, options. I’ve chosen to configure it to only allow a single image file from local storage no larger than 1024x1024, which I set in a variable defined outside of the return in my form’s render method:</p><pre>const basicOptions = {<br>  accept: &#39;image/*&#39;,<br>  fromSources: [&#39;local_file_system&#39;],<br>  maxSize: 1024 * 1024,<br>  maxFiles: 1,<br>}</pre><p>You can do quite a bit more with the options here, including configuring Filestack to automatically crop or resize images, specifying alternate hosting (S3, Dropbox, Azure, and more), adding watermarks, etc., but what you see here will have you up and running in just a few minutes.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ba80455d2aa7" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building a RESTful API with Node, Express, and MongoDB]]></title>
            <link>https://medium.com/@krandles/building-a-restful-api-with-node-express-and-mongodb-9a78119973aa?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/9a78119973aa</guid>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Tue, 27 Feb 2018 19:55:40 GMT</pubDate>
            <atom:updated>2018-02-27T20:00:19.082Z</atom:updated>
            <content:encoded><![CDATA[<p>As I’ve become more familiar with JavaScript, and more aware of the possibilities it offers, I’ve been curious about the recent trend of full-stack Javascript applications — “recent” being a relative term here, as backend JS frameworks started appearing shortly after the release of Node.js in 2009. Node, for those unfamiliar with it, is a JavaScript runtime built on Google’s V8 engine (this is what runs JavaScript in Chrome), that allows you to run JS code on a server, uncoupled from the browser. If you’d like to follow along with my code examples here, you’ll need to install Node, which you can find <a href="https://nodejs.org/en/">here</a>.</p><p>For my first foray into JavaScript on the backend, I decided to take a look at Express, one of the most popular JS web frameworks. Released in 2010, Express is a minimalist, unopinionated framework that extends the basic HTTP server functionality available in Node. As a minimalist framework, the feature set it provides out-of-the-box is limited compared to many other frameworks, but as a result of its popularity, there’s an extensive <a href="http://expressjs.com/en/resources/middleware.html">collection of middleware</a> available to add functionality as the requirements of your project necessitate.</p><p>This blog post will take a brief look at how to set up an Express server as a simple API endpoint using a MongoDB database for storage. I chose MongoDB as an opportunity to get more familiar with NoSQL databases, a concept I’ve heard about repeatedly, but that I’ve only had a vague understanding of — if you’re in the same position, and you’re familiar with SQL databases, you might be curious why we don’t have to define schema or migrations before adding data to our database. Very broadly, MongoDB is a document database that stores records as collections of documents, which are JSON-like objects composed of key:value pairs, with dynamic schema. (For a more in-depth intro to MongoDB, see <a href="https://www.codeproject.com/Articles/1037052/Introduction-to-MongoDB">here</a>)</p><h3>Getting Started</h3><p>Assuming you’ve already installed Node from the link above, the first steps are creating a project folder and getting it ready. My example here will be an API for data about beers, because beer is great, so I’ll take the obvious route and call this app “beerdb”:</p><pre>$ mkdir beerdb<br>$ cd beerdb<br>$ npm init</pre><p>The “npm init” command will ask you for a lot of info here, but you can just accept the default values, with the exception of the entry point, which i’ve changed to “server.js”</p><p>Next, we need to add a few packages to our project — Express, for obvious reasons, the MongoDB client to interface with our database, and body-parser, for parsing HTTP requests as JSON. Installing Nodemon in your dev environment is also highly recommended — it will keep an eye on your project folder and restart your server whenever your files change during development.</p><pre>$ npm install --save express<br>$ npm install --save mongodb@2.2.19<br>$ npm install --save body-parser<br>$ npm install --save-dev nodemon</pre><p>Your package.json file should look like the following, with one exception — you’ll need to add the highlighted text under “scripts” to allow Nodemon to do its thing.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/519/1*yl4xh_3KhSDAMHal2PiWvw.png" /></figure><p>With our packages installed, we can now get started on setting up our server — create a file called “server.js” in the root folder of your project, and add the following code:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/567/1*jVxmZLet7otXmnCyoJ7Dew.png" /></figure><p>At this point, you can run “npm run dev” (or “npm start” if you’re not using Nodemon) in your terminal and, assuming you’ve done everything correctly your server should be up and running:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/401/1*B0pC7BSGrTLh0H9PAxTiqA.png" /></figure><p>We have a server! But without any routes, it can’t do much of anything, so let’s make some routes — first, to keep our project logically organized, create an “app” folder in the root folder of your project then, within “app”, a “routes” folder containing two files — “index.js”, where we’ll export our routes for use by the server and “beer_routes.js”, where we’ll define our routes. Express requires our routes to be wrapped in a function, which needs to have our server instance and database (we don’t have a database yet, but I’ll get to that shortly) passed to it as arguments, which looks something like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/558/1*trD44JlVv1o_JYhphpydKA.png" /></figure><p>To break down the code here a little:</p><ul><li>Line 5 uses Express’ methods to define the type of request, in this case a POST, and the route — “/beers”</li><li>Lines 6–10 grab the details about our new beer from the body of the POST request and save them to a variable</li><li>Lines 13–17 tell our database which collection we want (beers, we always want beers), and what to to that collection, insert a new document then, depending on the database’s response, returns the appropriate response to the client.</li></ul><p>In index.js, we just need to package our routes (we only have one set of routes at the moment, but as our application grows we would collect additional routes we create here) for export.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/393/1*yRnnAmmlx5Fj49CS4VygyA.png" /></figure><p>Now we have a route that should allow us to add new beers to our database, but we don’t have a database! We also don’t have a way to send data to this route to find out if it works, so it’s time for a brief digression…</p><h3>Setting up MongoDB</h3><p>If you’d like, you can host your database locally, and there are plenty of tutorials like <a href="https://www.w3schools.com/nodejs/nodejs_mongodb.asp">this one at W3Schools</a>, but for expediency I’m using <a href="https://mlab.com/">mLab</a>. Their free tier gives you up to 500MB of storage, and your choice of hosting on AWS or Azure. Once you’ve created an account, create a new database and add a database user then, from your newly created database’s page, you’ll need to grab the link that looks something like this:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/491/1*icAS1Co7VEMKfzRUO3N-Rg.png" /></figure><p>Create a new folder called “config” in your project’s root folder, then a “db.js” file within “config”, where you’ll store and export your database’s URL, substituting your database user’s credentials here:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/577/1*LKtXpsKrCNzf5UbJetfv1w.png" /><figcaption>Don’t put this file on GitHub!!!</figcaption></figure><p>Back in “server.js”, we need to import our db.js file and configure MongoClient to connect to the new database (this replaces our earlier call to app.listen)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/445/1*FBQo5Bd8pKYANWMtpFNCfA.png" /></figure><p>Now we should be ready to add some beers to our database, and unless you’ve already built a front-end, the best way to make sure everything is set up properly is with <a href="https://www.getpostman.com/">Postman</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/555/1*Lb5qmugkFIsQOZbeEmduxw.png" /></figure><p>Configure your POST request as shown above, send it off, and if all is well you should get a response containing your newly created document:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/306/1*5YA8DhDmxh2DlnBD5_VkUA.png" /><figcaption>Mmmm, Double Shot</figcaption></figure><p>Now that we have something in our database, it’s time to build out the rest of our routes, because what good is a database you can only add things to?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/511/1*g_jWopVnycu7mws-206-1A.png" /></figure><p>This is our GET route — if you understand what’s going on in the POST route, this isn’t much different. We’re using the findOne method to look up a document by ID, but keep in mind MongoDB expects to receive the ID as an instance of ObjectID, not a string, so we need one more line at the top of of beer_routes.js:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/376/1*5OHX2gxUj8HBu5yo3lBEdw.png" /></figure><p>The DELETE and PUT/PATCH routes are very similar to the GET and POST routes:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/567/1*xRQTRN4W28Zj7XilZ-C8_Q.png" /></figure><p>And finally, a second GET route, this one to return the index of all the beers:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/475/1*0ngUURvOpoQwTtbWYK4AdA.png" /></figure><p>With that, you’ve created a RESTful API endpoint with Express!</p><p>I’ll post this example code on GitHub shortly, so if you’re reading this I haven’t done that yet…</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9a78119973aa" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Emmet: How Lazy Developers Write HTML]]></title>
            <link>https://medium.com/@krandles/emmet-how-lazy-developers-write-html-14f29840bc2e?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/14f29840bc2e</guid>
            <category><![CDATA[flatiron-school]]></category>
            <category><![CDATA[emmet]]></category>
            <category><![CDATA[web-development]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Tue, 06 Feb 2018 18:30:38 GMT</pubDate>
            <atom:updated>2018-02-06T18:30:38.089Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/451/1*UWTS9bIfU-Q_Bs5Z78gZOw.png" /><figcaption>Or, How to Avoid Doing This</figcaption></figure><p>To a new or aspiring software developer, the extent of the modern text editor can be overwhelming. I just went through all the user settings in VS Code while procrastina…I mean, thinking about how to start this blog post, and there are 475 of them! I can recall looking at the same list of settings when I wanted to change my font a few months ago, and my brain just turned itself off after the first page or two. Well, I made it through the list this time, and found a few things I’d like to behave differently, and I’m reasonably sure I know what 90% of those settings do now. Progress!</p><p>Similarly, when I settled on VS Code as my editor of choice, there were a few features that stood out as immediately useful, and a lot of things I didn’t quite understand, and the months since then have been a gradual discovery of what Code has to offer. My most recent revelation was Emmet.</p><p>I knew about text snippets, and had even made a few of my own to spare myself some tedious typing while working with Ruby, so I just assumed that, when I type “p” in an HTML document, then hit Tab to accept the suggestion and create a pair of tags, like so…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/271/1*JzPdyum4ZSPeUCUdW3Binw.gif" /></figure><p>…or use an exclamation point to create the basics of an HTML document…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/673/1*-yqZ9X55R64fAuXBhvRItA.gif" /></figure><p>…this was just a simple shortcut in action.</p><p>But as I discovered recently, this is Emmet in action, and it can do a lot more than save you the effort of typing a few angle brackets, but first…</p><h3>A Brief Digression</h3><p>If you’re using VS Code, you can skip this section— you already have Emmet. If not, it’s available as an extension for a somewhat absurd number of text editors, and you can probably find yours <a href="https://emmet.io/download/">right here</a>. Now, with that out of the way…</p><h3>What Else Can You Do With Emmet?</h3><p>Let’s start simply…Emmet supports CSS selector syntax for IDs and classes, so it’s trivial to add those to your tags:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/327/1*2bFfzFIpDTyYIzrkOwh5qA.gif" /></figure><p>But we can save at least one more keystroke here, since Emmet supports chaining tags together using some simple syntax:</p><pre>+  -  next tag is a sibling<br>&gt;  -  next tag is a child<br>^  -  climb back up a level</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/537/1*7bJPQR6BOzX7S1wdEdpQUA.gif" /></figure><p>Using the multiplication operator “*” does just what you’d think, but you can enhance it with “$” to produce a numbered series of attributes:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/272/1*FT3ly0GL_bM7wl40LDbfgA.gif" /></figure><p>Emmet supports implicit tag names where appropriate, for example, items in lists or rows and columns in tables, or starting a group of tags with a div:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/328/1*xrJS0v9BloOKpDvgAZUFFw.gif" /></figure><p>Need some placeholder text? Emmet’s got all the lorem ipsum you need:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/459/1*yyxi3Oj-kBTG8JS6QcGWOQ.gif" /></figure><p>And just to simplify your life a little more, it also sets your next tab points wherever text might need to be inserted:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/473/1*cDeeHG4U38ScmhZgdhgfMg.gif" /></figure><p>These are just a few of the HTML shortcuts Emmet offers, without even mentioning the several pages of CSS shortcuts, or customization, or wrapping, or balancing….but that’s all covered in the documentation.</p><p><a href="https://docs.emmet.io/">Emmet Documentation</a></p><p><a href="https://docs.emmet.io/cheat-sheet/">Emmet Cheat Sheet</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=14f29840bc2e" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Active Record Validations]]></title>
            <link>https://medium.com/@krandles/active-record-validations-890519b94fe7?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/890519b94fe7</guid>
            <category><![CDATA[ruby-on-rails]]></category>
            <category><![CDATA[flatiron-school]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Tue, 16 Jan 2018 05:18:12 GMT</pubDate>
            <atom:updated>2018-01-16T18:21:37.242Z</atom:updated>
            <content:encoded><![CDATA[<p>Having spent a few too many years working in desktop support, if there’s one thing I can tell you about the users of your software, it’s that they’re going to use it incorrectly.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/258/1*N_Dj3E0_B5DFW7C0n7GeEQ.gif" /><figcaption>You <strong>probably</strong> won’t break the internet if you do this, but are you willing to take that risk?</figcaption></figure><p>As software engineers, part of our job is to make sure that the software we write doesn’t break when used in unexpected ways and, when users inevitably do something wrong, to do our best to communicate where they went wrong and how to correct it, otherwise, before long our software probably won’t have any users (or at the very least, we won’t have any happy users). Depending on the application, you might be able to limit the things your users can do such that there’s no way they can make your application do anything you don’t want them to do, but in most cases this just isn’t realistic.</p><h3>Enter data validation</h3><p>Building simple CLI apps at Flatiron recently, I’ve figured out some techniques for dealing with unexpected inputs and, as my applications have become more complex, I imagined the work involved in accounting for user error would increase at the same rate…but my code is on Rails now, and Rails does magic tricks.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*scEhON2k13kP2FbXBo2NsQ.gif" /></figure><p>Thankfully, the illusionists/engineers who built Rails have provided us with ways to take a lot of the work out of making sure our users are putting the right information in the right place, and in the right format, in the form of <a href="http://guides.rubyonrails.org/active_record_validations.html#validation-helpers">validation helpers</a>. Active Record’s validation helpers cover a lot of cases we might find ourselves needing to account for.</p><p>Need to make sure the username field is filled out on the form for a new account? “Presence” is about as basic as validation gets — is there something here?</p><pre>class User &lt; ApplicationRecord<br>  validates <strong>:name</strong>, presence: true<br>end</pre><pre>Person.create(name: <em>&quot;Beef Supreme&quot;</em>).valid? # =&gt; true<br>Person.create(name: nil).valid? # =&gt; false</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*_woZtXKXcamwDHTeVgg8RA.jpeg" /></figure><p>If so, great, Beef Supreme can create his account. If not, Rails, along with a little effort on our part, can tell Mr. Supreme that he forgot to enter his name. But, as anyone who knows Beef Supreme is aware, he’s not the sharpest, so what if he already has an account?</p><pre>class Account &lt; ApplicationRecord<br>  validates <strong>:email</strong>, uniqueness: true<br>end</pre><p>“uniqueness: true” will check to see if Beef has already registered his email address and, if so, generates an error message:</p><pre>beef.supreme@brawndo.com has already been taken</pre><p>I won’t go into all of the helpers here, but I do want to take a look at some of the ways you can extend their functionality beyond their basic syntax. Let’s say we have a simple Beer model, and our schema looks like this:</p><pre>create_table &quot;beers&quot;, force: :cascade do |t|<br>  t.string   &quot;name&quot;<br>  t.string   &quot;brewery&quot;<br>  t.string   &quot;style&quot;<br>  t.float    &quot;abv&quot;<br>  t.text     &quot;description&quot;<br>  t.integer  &quot;vintage&quot;<br>end</pre><p>Validating that all of these fields have been filled out (to say nothing of other validations we might need to do) in our new beer form would get repetitious, and doing it like this doesn’t look very DRY:</p><pre>class Beer &lt; ActiveRecord::Base<br>  validates :name, presence: true<br>  validates :brewery, presence: true<br>  validates :style, presence: true<br>  validates :abv, presence: true<br>end</pre><p>But this accomplishes the same thing:</p><pre>validates :name, :brewery, :style, :abv, presence: true</pre><p>If we want to check to see if a beer is already in our database, we can use “uniqueness”, but some brewers just name their beers after the style, and we might want to keep track of different vintages of the same beer separately.</p><pre>validates :name, uniqueness: { scope: [:brewery, :vintage] }</pre><p>Passing the “scope” option to our uniqueness validation allows us to check for a unique combination of properties, here ensuring that the same beer name, by a different brewery or of a different vintage, will be treated as a unique beer.</p><p>In other cases, the permitted values for one property may depend on the value of another. Here we can use conditional validations, for example, making sure the ABV of a beer is within the typical range, unless it’s a barleywine, in which case the sky’s the limit:</p><pre>validates :abv, inclusion: { in: 0...30 },<br>                unless: Proc.new { |b| b.style == &quot;barleywine&quot; }</pre><h3>Custom Validations</h3><p>As you can see, Rails’ validation helpers are pretty versatile, and in many cases can provide everything we need to make sure we’re only accepting properly validated data, but Rails’ magic can’t account for every situation.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/658/1*9eCJB24Xj96LeIIuNI76NQ.png" /></figure><p>Custom validations are classes that inherit from ActiveModel::Validator (you can also write custom methods in your models, and call them using “validate :method_name”), allowing you to build whatever functionality you need into your checks, although Cueball’s issue illustrated above might be beyond help.</p><p>More on Active Record validations:</p><p><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjSsZnSit3YAhWSUd8KHf4mDKkQFggpMAA&amp;url=http%3A%2F%2Fguides.rubyonrails.org%2Factive_record_validations.html&amp;usg=AOvVaw0r4zKycKCtlitzQA8hIZWm">Rails Guides — Validations</a></p><p><a href="https://hackernoon.com/performing-custom-validations-in-rails-an-example-9a373e807144">Performing Custom Validations in Rails — an Example</a></p><p><a href="https://robots.thoughtbot.com/the-perils-of-uniqueness-validations">The Perils of Uniqueness Validations</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=890519b94fe7" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RSS and Ruby — It’s Really Simple]]></title>
            <link>https://medium.com/@krandles/rss-and-ruby-its-really-simple-a32a8654733a?source=rss-d451d084d34a------2</link>
            <guid isPermaLink="false">https://medium.com/p/a32a8654733a</guid>
            <category><![CDATA[rss]]></category>
            <category><![CDATA[ruby]]></category>
            <category><![CDATA[flatiron-school]]></category>
            <dc:creator><![CDATA[Kevin Randles]]></dc:creator>
            <pubDate>Thu, 21 Dec 2017 03:20:48 GMT</pubDate>
            <atom:updated>2018-01-16T00:39:21.872Z</atom:updated>
            <content:encoded><![CDATA[<h3>No, really, it is…</h3><p>I’ve been using an RSS aggregator as my primary method of consuming news for about 10 years, so now that I’m learning how to do more with Ruby than just execute blocks of code, I thought I’d dig into how I can use Ruby to interact with an RSS feed and see just what I can do with it. As it turns out, it’s really quite simple.</p><h3>What is RSS?</h3><p>RSS, created by a couple engineers at Netscape back in the days when Netscape was still a thing, originally stood for Rich Site Summary (thanks, <a href="https://en.wikipedia.org/wiki/RSS">Wikipedia</a>!) but is now known as Really Simple Syndication and it, along with the very similar Atom, is a standardized format for providing a feed of a website’s content, generally to be used by a feed aggregator, such as <a href="https://feedly.com/">Feedly</a> or the late, lamented Google Reader.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/262/1*vUkpL86j98HEOJaWSCJZLg.png" /><figcaption>There’s an xkcd for everything.</figcaption></figure><p>If you’re not sure why this would be useful, well…just try keeping up with the content of a few dozen pages without using an aggregator. Sure, you could follow them all on Twitter or Google Plus (LOL), as long as you’re cool with an algorithm deciding which posts actually show up in your feed, but a good RSS aggregator will give you total control over your newsfeed and ensure that you never miss a post, to say nothing of the ability to turn a Craigslist or eBay search into a custom RSS feed.</p><h3>OK, so how does it work?</h3><p>An RSS feed is just an XML-formatted document, and if you’ve ever published a blog post then you’ve almost certainly published an RSS feed along with it, whether you were aware of it or now. Below is the RSS feed for this very blog, which you can see for yourself at <a href="https://medium.com/feed/@krandles">https://medium.com/feed/@krandles</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/827/1*rpT80Jj8zPCAp_jiUYK1xQ.jpeg" /></figure><p>Since I’m in the middle of writing my first post here, it doesn’t actually contain any articles yet, but you can see it already provides some basic information about my blog, and we’ll take a look at an actual post a bit later on.</p><p>First, let’s get into how we can use Ruby to scrape an RSS feed from a website and turn it into something we can work with.</p><h3>require ‘rss’</h3><p>A quick search of <a href="https://rubygems.org/search?utf8=%E2%9C%93&amp;query=rss">rubygems.org</a> for “rss” returns a couple hundred results, but all we need to get started (along with open-uri, so Ruby can open webpages) is Ruby’s standard library, which provides the ability to produce and consume feeds via the <a href="http://ruby-doc.org/stdlib-2.4.2/libdoc/rss/rdoc/RSS.html">RSS module</a>:</p><pre>require &#39;rss&#39;<br>require &#39;open-uri&#39;</pre><p>Trying out the example code provided in the Ruby documentation shows off the basic functionality:</p><pre>url = &#39;https://medium.com/feed/@olegchursin/&#39;</pre><pre>open(url) do |rss|<br>  feed = RSS::Parser.parse(rss)<br>  puts &quot;Title: #{feed.channel.title}&quot;<br>  feed.items.each do |item|<br>    puts &quot;Item: #{item.title}&quot;<br>  end<br>end</pre><p>This parses the feed’s XML data into an object of class RSS::Rss and demonstrates calling #channel and #items to output the titles of the channel (Hi, Oleg!) and its recent articles:</p><pre>Title: Stories by Oleg Chursin on Medium<br>Item: A Brief Introduction to Domain Modeling<br>Item: Refactoring in Ruby</pre><p>Now that we have the feed in a format Ruby can easily use, we can call the #items method on it, which returns an array containing the feed’s articles as objects of class RSS::Rss::Channel::Item, then call each Item’s methods to access title, description, creator, etc., and a link to the full article.</p><p>All of this turned out to be much easier than I was expecting, and I wanted to play around with RSS a little more, so I started building some methods to interact with a feed, then created an RSSFeed class and a command line interface to navigate and display the feed’s contents and open full articles in a browser. A couple hours later I ended up with an RSS reader application. It’s still very basic, but I hope to build on it as I continue to expand my knowledge — next up is storing feeds, channels, and articles in a database, then perhaps displaying all of this on a webpage instead of in a terminal window.</p><p>If you’re curious about seeing how I did all this it’s up on Github at the link below, and you can expect to see more posts here related to this project as I continue to build it.</p><p><a href="https://github.com/krandles/really-simple-rss">krandles/really-simple-rss</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a32a8654733a" width="1" height="1" alt="">]]></content:encoded>
        </item>
    </channel>
</rss>