<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Google Cloud - Community - Medium]]></title>
        <description><![CDATA[A collection of technical articles and blogs published or curated by Google Cloud Developer Advocates. The views expressed are those of the authors and don&#39;t necessarily reflect those of Google. - Medium]]></description>
        <link>https://medium.com/google-cloud?source=rss----e52cf94d98af---4</link>
        <image>
            <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
            <title>Google Cloud - Community - Medium</title>
            <link>https://medium.com/google-cloud?source=rss----e52cf94d98af---4</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2024 05:09:27 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/google-cloud" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Securing Anthos Workload With Chronicle Backstory — A comprehensive approchg]]></title>
            <link>https://medium.com/google-cloud/securing-anthos-workload-with-chronicle-backstory-a-comprehensive-approchg-fcf4a9a3a78b?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/fcf4a9a3a78b</guid>
            <category><![CDATA[ai]]></category>
            <category><![CDATA[cloud-computing]]></category>
            <category><![CDATA[gcp-security-operations]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[cybersecurity]]></category>
            <dc:creator><![CDATA[Imran Roshan]]></dc:creator>
            <pubDate>Mon, 13 May 2024 02:17:57 GMT</pubDate>
            <atom:updated>2024-05-13T02:17:57.011Z</atom:updated>
            <content:encoded><![CDATA[<h3>Securing Anthos Workloads With Chronicle Backstory — A comprehensive approach</h3><p>Implementation process, threat detection strategies, and remediation workflows to get started.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/900/0*RpN2FuNx2P5E8wai.jpg" /></figure><p>How cool would it be to have a single glass-pane to secure Anthos as well as GKE clusters on the go? Helping implement automation to be granular security findings before it escalates?</p><p>The world of multiple clouds and hybrid systems poses distinct security challenges. The Anthos platform from Google Cloud makes it easier to deploy applications in a variety of environments, but securing these workloads calls for a thorough strategy. With the recent integration of Chronicle Backstory, a threat detection and investigation tool, with Anthos, we can now leverage extended detection and response (XDR) capabilities throughout this intricate environment. This blog delves deeply into the technical aspects of using Chronicle Backstory to secure Anthos workloads, including data ingestion, threat hunting queries, and utilizing the integrations that are already built in.</p><h3>Implementing Backstory with Anthos</h3><p>Chronicle Backstory uses pre-existing data sources to identify potential threats. Our main goal in integrating it with Anthos will be to consume information from two main sources:</p><p><strong>Cloud Audit Logs:</strong> Your GCP projects’ administrative activity, including that of Anthos clusters, is recorded in these logs.<br><strong>GKE Logs: </strong>The Kubernetes Engine (GKE) logs offer valuable information about the activities of containers and possible security incidents that occur in your Anthos workloads.</p><h4>Configuring cloud audit logging for Backstory</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*e6I_qtdeaCqpVhuqPvmYXg.gif" /><figcaption><a href="https://images.app.goo.gl/dM7fV7uT2ZPAD6ZD9">https://images.app.goo.gl/dM7fV7uT2ZPAD6ZD9</a></figcaption></figure><p>We start with enabling cloud audit logs for our GCP project as starters, run the command below to add an IAM binding to the Chronicle ingestor service account.</p><pre>gcloud projects add-iam-policy-binding PROJECT_ID \<br>  --member=&quot;serviceAccount:chronicle-ingestor@backstory.iam.gserviceaccount.com:user&quot; \<br>  --role=&quot;roles/logging.logWriter&quot;</pre><p>Now that we have a log ingestor in place we can go ahead and create a logging sink to backstory. With this setup, Anthos cluster activity from Cloud Audit Logs can be ingested by Backstory.</p><pre>gcloud logging sinks create backstory-sink \<br>  --log-filter=&quot;resource.type=cluster&quot; \<br>  --destination=&quot;projects/PROJECT_ID/sinks/backstory-sink&quot; \<br>  --destination-type=backstory</pre><p>Enabling GKE logging for backstory includes two steps:</p><ul><li>Enable Stackdriver Kubernetes Engine Monitoring for your Anthos cluster.</li><li>Create a sink within Stackdriver Monitoring to export logs to Backstory:</li></ul><pre># Configure the Stackdriver Logging Agent<br>apiVersion: logging.k8s.io/v2<br>kind: LoggingDeployment<br>metadata:<br>  name: backstory-agent<br>spec:<br>  sinkRefs:<br>  - name: &quot;backstory-sink&quot;<br>    namespace: &quot;logging&quot;<br>  # Replace with your Backstory ingestion endpoint<br>  outputDataset: &quot;projects/your-project-id/datasets/anthos-logs&quot;<br>  # Filters to select relevant container logs<br>  selectors:<br>  - expression: &quot;resource.type=k8s_container&quot;<br>---<br># Define the Stackdriver Logging Sink to route logs to Backstory<br>apiVersion: logging.k8s.io/v2<br>kind: LoggingSink<br>metadata:<br>  name: backstory-sink<br>spec:<br>  # Replace with your Backstory ingestion credentials<br>  secretRef:<br>    name: backstory-credentials<br>  destination: <br>    # Configure secure HTTPS destination for Backstory<br>        destination: &quot;https://your-backstory-endpoint.google.com/v2/ingest&quot;<br>    # Define the log format for Backstory ingestion<br>    outputFormat: &quot;json&quot;</pre><p>With this setup, Backstory receives GKE logs from your Anthos workloads that show container activity.</p><h3>Threat Detection With Backstory Queries</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*mkKqN1LfvAgBx4jO.jpg" /></figure><p>Using Chronicle Query Language, Backstory is highly proficient in threat detection (CQL). Here are a few instances:</p><h4>Detecting Suspicious APIs</h4><p>This query finds instances of unauthorized users within Anthos clusters making API calls to the Secrets API.</p><pre>SELECT resource.labels.cluster_name, <br>       timestamp, <br>       protoPayload.methodName, <br>       protoPayload.request.principalEmail <br>FROM audit_log <br>WHERE protoPayload.methodName LIKE &#39;%/v1/secrets%&#39; <br>  AND NOT protoPayload.request.principalEmail LIKE &#39;%admin@yourdomain.com&#39;<br>ORDER BY timestamp DESC;</pre><h4>Unusual Container Activity Detection</h4><p>This query finds containers that crash frequently in Anthos workloads, which may be a sign of suspicious activity.</p><pre>SELECT resource.labels.cluster_name, <br>       container.name, <br>       timestamp, <br>       jsonPayload.reason <br>FROM container <br>WHERE jsonPayload.reason LIKE &#39;%CrashLoopBackOff%&#39; <br>ORDER BY timestamp DESC;</pre><pre># Find container executions with unusual resource usage<br>SELECT process.name, container.name, resource.usage.cpu.usage_in_cores, resource.usage.memory.usage_in_bytes<br>FROM logs<br>WHERE resource.type = &quot;k8s_container&quot;<br>AND resource.usage.cpu.usage_in_cores &gt; (AVG(resource.usage.cpu.usage_in_cores) + 3 * STDDEV(resource.usage.cpu.usage_in_cores))<br>OR resource.usage.memory.usage_in_bytes &gt; (AVG(resource.usage.memory.usage_in_bytes) + 3 * STDDEV(resource.usage.memory.usage_in_bytes))<br>ORDER BY resource.usage.cpu.usage_in_cores DESC, resource.usage.memory.usage_in_bytes DESC</pre><h4>Suspicious Login Attempts</h4><p>This query looks for login attempts made during a specified time period from odd locations. Additional filtering options include user accounts or unsuccessful login attempts.</p><pre>SELECT user_email, source_ip, timestamp<br>FROM events<br>WHERE event_type = &#39;login.attempt&#39; AND<br>timestamp &gt;= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 1d) AND<br>geo_country(source_ip) NOT IN (&#39;US&#39;, &#39;GB&#39;)  -- Replace with trusted countries</pre><h4>Potential Lateral Movements</h4><p>This query looks for user activity that may indicate lateral movement across clusters involving multiple GCP resources. Events can be narrowed down by particular resource kinds or activities that take place within a constrained time frame.</p><pre>SELECT user_email, resource_type, resource_name, timestamp<br>FROM events<br>WHERE event_type IN (&#39;resource.create&#39;, &#39;resource.access&#39;)<br>GROUP BY user_email, resource_type, resource_name<br>HAVING COUNT(*) &gt; 5  -- Adjust threshold based on expected activity</pre><h4>Unusual File Access</h4><p>This query looks for file access events coming from source IP addresses or unexpected user accounts. Additional filters can be applied based on particular file types or attempts to access data after business hours.</p><pre>SELECT user_email, source_ip, file_path, timestamp<br>FROM events<br>WHERE event_type = &#39;file.access&#39;<br>AND (user_email NOT IN (&#39;admin@example.com&#39;, &#39;service_account@project.com&#39;)  -- Trusted accounts<br>OR geo_country(source_ip) NOT IN (&#39;US&#39;))  -- Trusted location </pre><h3>Remediation?</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*x9a8vmb4z1_JhlwL" /></figure><p>For automated remediation, Backstory integrates with a number of tools. Here are some examples using Cloud Functions (because that’s what I found closest at hand).</p><p>Isolating infected workloads on the cluster requires a cloud function to be triggered via Backstory findings after which we can add the function:</p><pre>def isolate_workload(data, context):<br>  # Extract cluster name and pod details from Backstory alert.<br>  cluster_name = data[&#39;resource&#39;][&#39;labels&#39;][&#39;cluster_name&#39;]<br>  pod_name = data[&#39;container&#39;][&#39;name&#39;]<br><br>  # Use Kubernetes API to cordon the infected node.<br>  from kubernetes import client, config<br>  config.load_kube_config()<br>  v1 = client.AppsV1Api()<br>  v1.patch_namespaced_daemon_set(<br>      &quot;kube-system&quot;, &quot;kube-dns&quot;, body={&quot;spec&quot;: {&quot;template&quot;: {&quot;spec&quot;: {&quot;taints&quot;: [{&quot;effect&quot;: &quot;NoSchedule&quot;, &quot;key&quot;: &quot;infected&quot;}]}}}}<br>  )</pre><p>With the addition of a taint to stop additional pod scheduling, this Cloud Function automatically isolates the compromised node.</p><p>Further, you can implement something like:</p><pre>def remediate_backstory_finding(data, context):<br>  &quot;&quot;&quot;Cloud Function triggered by Backstory detection.&quot;&quot;&quot;<br>  # Parse the Pub/Sub message data<br>  pubsub_message = json.loads(data)<br>  backstory_finding = json.loads(pubsub_message[&quot;data&quot;])<br><br>  # Extract relevant details from the detection<br>  finding_name = backstory_finding[&quot;findingName&quot;]<br>  threat_type = backstory_finding[&quot;externalSystems&quot;][0][&quot;threatType&quot;]<br><br>  # Implement logic for remediation based on threat type<br>  if threat_type == &quot;MALWARE&quot;:<br>    # Example: Isolate the affected workload<br>    print(f&quot;Isolating workload associated with finding: {finding_name}&quot;)<br>    # Replace with your specific isolation workflow (e.g., API call to Anthos)<br>  elif threat_type == &quot;PORT_SCAN&quot;:<br>    # Example: Block suspicious IP addresses<br>    print(f&quot;Blocking suspicious IP addresses from finding: {finding_name}&quot;)<br>    # Replace with your specific IP blocking workflow (e.g., firewall rule update)<br>  else:<br>    print(f&quot;Unrecognized threat type: {threat_type} for finding: {finding_name}&quot;)<br>    # Implement logic for handling unknown threats or sending notifications<br><br></pre><p>A Pub/Sub message with the Backstory detection details in JSON format initiates the function. After parsing the message data, the threat type and finding name are extracted.<br>The function carries out particular remediation actions based on the type of threat. Including examples of workload isolation for malware and IP blocking for port scans in this case.</p><h3>Conclude</h3><p>These are but a few simple instances. Depending on your unique Anthos environment, security posture, and the threats you want to find, you’ll need to modify the queries. As the integration develops, it’s also advised to refer to the official Backstory documentation for the most recent syntax and functionalities.</p><h3>Get in touch??</h3><p><a href="https://linktr.ee/imranfosec">imranfosec | Instagram | Linktree</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fcf4a9a3a78b" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/securing-anthos-workload-with-chronicle-backstory-a-comprehensive-approchg-fcf4a9a3a78b">Securing Anthos Workload With Chronicle Backstory — A comprehensive approchg</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Talk to pdf using Bigquery Vectors, GPT4-Turbo & langchain]]></title>
            <link>https://siddoncloud.medium.com/talk-to-pdf-using-bigquery-vectors-gpt4-turbo-langchain-4eac63140211?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/4eac63140211</guid>
            <category><![CDATA[langchain]]></category>
            <category><![CDATA[chatgpt]]></category>
            <category><![CDATA[generative-ai]]></category>
            <category><![CDATA[bigquery]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <dc:creator><![CDATA[Sid]]></dc:creator>
            <pubDate>Sun, 12 May 2024 20:52:04 GMT</pubDate>
            <atom:updated>2024-05-13T02:17:15.590Z</atom:updated>
            <content:encoded><![CDATA[<p>In this brief article, i am going to show you how to leverage the langchain framework with OpenAI (gpt-4) to work with Google clouds BigQuery vector search offering.</p><p>We are going to use a PDF file which provides a comprehensive overview of trends in AI research and development as of 2023. It covers various aspects of AI advancements including the growth in AI publications, the evolution of machine learning systems, and significant trends in AI conference attendance and open-source AI software. Key highlights include detailed statistics on AI journal, conference, and repository publications categorized by type, field of study, and geographic area.</p><p>This PDF will be converted to text embeddings after which i will show you how to retrieve them using langchain’s <strong>ConversationalRetrievalChain with memory </strong>by creating a retriever object which will point to the embeddings and eventually talk to the PDF using simple search queries.</p><p>So lets begin.</p><p><strong>Note</strong>- You need an active GCP account for this tutorial, even a trial account will do.</p><h4>Step-1: Install the necessary modules in your local environment</h4><blockquote>pip3 install — upgrade langchain langchain_google_vertexai</blockquote><blockquote>pip3 install — upgrade — quiet google-cloud-storage</blockquote><blockquote>pip3 install pypdf</blockquote><h4>Step-2: Create a BigQuery Schema and download credentials file from GCP Account</h4><p>Head over to bigquery, open up an editor and create a schema. Call it <strong>bq_vectordb </strong>and this is the schema where the table which will store our vector embeddings will be created.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-LkhEbUf5INjqNH7uA5jjQ.png" /></figure><p>Now, navigate to <strong>IAM</strong> from the GCP console and select <strong>Service Accounts </strong>from the left navigation. Here we will create and download the permissions json file containing the private key which we will use in the Python script. This json file grants our local environment access to the services in our GCP account on a project level.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*prwgQH8LWrlaiDLv5rO76g.png" /></figure><p>Click on <strong>Manage keys</strong> and then select <strong>ADD KEY</strong> followed by <strong>Create new key. </strong>Thats it, select the key type as JSON and a file will be automatically downloaded to your system.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*tMZn_SLrTwt2BRYUpQieEQ.png" /></figure><p>Rename and copy this file to your current working directory.</p><p>That was as far as the environment setup goes, now we can get to the execution part.</p><h4>Step-3: Create and Ingest Embeddings using VertexAIEmbeddings, GCSFileLoader &amp; BigQueryVectorSearch</h4><p>First, we need to create embeddings from the PDF File: <strong>example.pdf</strong> using <strong>VertexAIEmbeddings</strong>. To do that, we load this pdf file from a GCS bucket using <strong>GCSFileLoader</strong> from <strong>langchain</strong> and use the <strong>RecursiveCharacterTextSplitter</strong> to split this pdf into several chunks with an overlap size set to 100.</p><p><strong>NOTE: </strong>Before you execute the below code, make sure to upload example.pdf to a gcs bucket and change the path values accordingly.</p><blockquote>from langchain_google_vertexai import VertexAIEmbeddings</blockquote><blockquote>from langchain_community.vectorstores import BigQueryVectorSearch</blockquote><blockquote>from langchain.document_loaders import GCSFileLoader</blockquote><blockquote>from langchain_community.document_loaders import PyPDFLoader</blockquote><blockquote>from langchain.text_splitter import RecursiveCharacterTextSplitter</blockquote><blockquote>import os</blockquote><blockquote>os.environ[‘GOOGLE_APPLICATION_CREDENTIALS’] = ‘your-json-filename.json’</blockquote><blockquote>PROJECT_ID = “{project-id}”</blockquote><blockquote>embedding = VertexAIEmbeddings(</blockquote><blockquote>model_name=”textembedding-gecko@latest”, project=PROJECT_ID</blockquote><blockquote>)</blockquote><blockquote>gcs_bucket_name = “your-bucket-name”</blockquote><blockquote>pdf_filename = “test_data/example.pdf”</blockquote><blockquote>def load_pdf(file_path):</blockquote><blockquote>return PyPDFLoader(file_path)</blockquote><blockquote>loader = GCSFileLoader(</blockquote><blockquote>project_name=PROJECT_ID, bucket=gcs_bucket_name, blob=pdf_filename, loader_func=load_pdf</blockquote><blockquote>)</blockquote><blockquote>documents = loader.load()</blockquote><blockquote>text_splitter = RecursiveCharacterTextSplitter(</blockquote><blockquote>chunk_size=10000,</blockquote><blockquote>chunk_overlap=100,</blockquote><blockquote>separators=[“\n\n”, “\n”, “.”, “!”, “?”, “,”, “ “, “”],</blockquote><blockquote>)</blockquote><blockquote>doc_splits = text_splitter.split_documents(documents)</blockquote><blockquote>for idx, split in enumerate(doc_splits):</blockquote><blockquote>split.metadata[“chunk”] = idx</blockquote><blockquote>print(f”# of documents = {len(doc_splits)}”)</blockquote><p>Once you have chunked your PDF data, now its time to ingest it into BigQuery vector search.</p><p>Define your dataset (created in the first step) and table name. The table will be created at run time. Next, create an object <strong>BigQueryVectorSearch </strong>and use this object to invoke the <strong>add_documents</strong> method.</p><blockquote>DATASET = “bq_vectordb”</blockquote><blockquote>TABLE = “bq_vectors” # You can come up with a more innovative name here</blockquote><blockquote>bq_object = BigQueryVectorSearch(</blockquote><blockquote>project_id=PROJECT_ID,</blockquote><blockquote>dataset_name=DATASET,</blockquote><blockquote>table_name=TABLE,</blockquote><blockquote>location=”US”,</blockquote><blockquote>embedding=embedding,</blockquote><blockquote>)</blockquote><blockquote>bq_object.add_documents(doc_splits)</blockquote><p>You can execute the entire <strong>bq_ingest_data.py </strong>script<strong> </strong>as a single python script.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ck70GOSwdEcUkUsXMHZHSA.png" /></figure><p>Once the execution is complete, you can head back to Bigquery and refresh your schema. You should see a table <strong>bq_vectors </strong>with the below columns and data. This means your embeddings have been created and are now stored in a BigQuery table.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*iBOif5duBgOT-W3BcKMaPw.png" /></figure><h4>Step-4: Retrieve embeddings &amp; use langchain with OpenAI to chat with your data</h4><p>Most of the below code is self-explanatory. We import the necessary libraries and use langchains <strong>ConversationBufferMemory</strong> which will retain the history of the chat in the subsequent messages which, is quite important if you are building a chatbot.</p><p>Make sure to use the actual values in the below script before executing it.</p><blockquote>from langchain_community.vectorstores import BigQueryVectorSearch<br>from langchain_google_vertexai import VertexAIEmbeddings<br>from langchain_google_vertexai import VertexAI<br>from langchain.chains import RetrievalQA<br>from langchain.chains import ConversationalRetrievalChain<br>from langchain.memory import ConversationBufferMemory<br>from langchain.chat_models import ChatOpenAI<br>import pandas as pd <br>import os</blockquote><blockquote>api_key = “your-openai-api-key”<br>os.environ[‘GOOGLE_APPLICATION_CREDENTIALS’] = ‘json-filename.json’</blockquote><blockquote>DATASET = “bq_vectordb”<br>TABLE = “bq_vectors”<br>PROJECT_ID = “project-id”</blockquote><blockquote>embedding = VertexAIEmbeddings(<br> model_name=”textembedding-gecko@latest”, project=PROJECT_ID<br>)</blockquote><blockquote>memory = ConversationBufferMemory(memory_key=”chat_history”, return_messages=True,output_key=’answer’)</blockquote><blockquote>bq_object = BigQueryVectorSearch(<br> project_id=PROJECT_ID,<br> dataset_name=DATASET,<br> table_name=TABLE,<br> location=”US”,<br> embedding=embedding,<br>)</blockquote><p>You can execute this code inside a jupyter notebook.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KaswBhP0_5ocyFZi7GdrOA.png" /></figure><p>We now define our <strong>llm model </strong>and create a <strong>retriever</strong> object which will point to the embeddings stored in the bigquery table.</p><blockquote>llm_openai = ChatOpenAI(model=”gpt-4-turbo-2024–04–09&quot;,api_key=api_key)<br>retriever = bq_object.as_retriever()</blockquote><blockquote>conversational_retrieval = ConversationalRetrievalChain.from_llm(<br> llm=llm_openai,retriever=retriever, memory=memory,verbose=False<br>)</blockquote><p>Define a function which will simply accept a user query and return the answer from the bigquery vector table.</p><blockquote>def QaWithMemory(query):<br> return conversational_retrieval.invoke(query)[“answer”]</blockquote><p>Now lets ask a question : “ <strong>What was the rate of growth in AI research publications from 2010 to 2021,<br> and which type of AI publication saw the most significant increase in this period?</strong>”</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*m3ZA7ojEsmKHbYq11NL84Q.png" /></figure><p>You can see the response. Its quite accurate if you read the PDF content. You can ask a followup question now without giving too many details, such as <strong>“and how might this growth impact the future of AI research priorities?”</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Zivc9_q_VhoaA9U154SFUg.png" /></figure><p>Alright, that was it for this tutorial. Hope you enjoyed it :-) . Stay tuned for more. Cheers</p><p><strong>Full Source code: </strong><a href="https://github.com/sidoncloud/gcp-use-cases/tree/main/langchain-bq-openai">https://github.com/sidoncloud/gcp-use-cases/tree/main/langchain-bq-openai</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4eac63140211" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Billed for unauthorized requests? Google Cloud Storage vs. AWS S3]]></title>
            <link>https://medium.com/google-cloud/billed-for-unauthorized-requests-google-cloud-storage-vs-aws-s3-8d4d6551fe72?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/8d4d6551fe72</guid>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[infrastructure]]></category>
            <category><![CDATA[cloud-storage]]></category>
            <category><![CDATA[billing]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <dc:creator><![CDATA[Marcos Manuel Ortega]]></dc:creator>
            <pubDate>Sat, 11 May 2024 04:44:46 GMT</pubDate>
            <atom:updated>2024-05-11T04:44:46.629Z</atom:updated>
            <content:encoded><![CDATA[<p>A recent story highlighted how unauthorized access to an empty AWS S3 bucket can result in surprising charges. This raised the question: can unauthorized access to Google Cloud Storage (GCS) also lead to unexpected bills?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/512/1*7wvAYoDth1XHDtqOA_BJJQ.jpeg" /></figure><h3>Catchup: what happened?</h3><p>A bit over a week ago, an interesting Medium story popped-up into many social feeds:</p><p><a href="https://medium.com/@maciej.pocwierz/how-an-empty-s3-bucket-can-make-your-aws-bill-explode-934a383cb8b1">How an empty S3 bucket can make your AWS bill explode</a></p><p>It even made into <a href="https://news.ycombinator.com/item?id=40203126">Hacker News frontpage</a>.</p><p>To sum up: a user found that unauthorized 403 requests to upload files to his AWS S3 empty bucket by other users were billed to his account, as his bucket ID was used as a default value into a popular open-source solution and thousands of deployments tried by mistake to upload backup data into his bucket.</p><p><strong>This was quite worrisome</strong>, as could be exploited by a malicious actor to bring anyone down just knowing any of our S3 bucket IDs: not by DoS but by <a href="https://academic.oup.com/cybersecurity/article/10/1/tyae004/7634012">Denial-of-Wallet attacks</a>.</p><p>This bore the question — <em>would this also happen on Google Cloud Storage?</em></p><p>Spoiler alert: <strong><em>no, 403 PUT requests are not billed in GCS.</em></strong></p><h3>Considerations</h3><h4>Base scenario</h4><p>The original story stated that 403 non-authorized requests to AWS S3 were billed.</p><p>We wanted to also verify whether in Google Cloud Storage 403 non-authorized PUT requests to private GCS buckets are billed or not.</p><h4>Number of requests</h4><p>As per the <a href="https://cloud.google.com/storage/pricing#operations-by-class">GCS pricing docs</a>, listing and uploading objects are billed as <em>Class A operations</em> and downloading/reading objects as <em>Class B operations</em>. Pricing is per 1000 operations, so we aimed for a adequate number of requests to make sure we would notice the charges.</p><h4>Requester pays disabled</h4><p>In GCS and S3 you can opt-in for “requester pays”, where the user making the request is paying for it instead of the bucket’s owner, which is intended for other scenarios e.g. sharing public data, rather than e.g. public website static date. Therefore, it was intentionally disabled, as is the usual configuration.</p><h4>“Always free” tier and billing exports</h4><p>In Google Cloud, there is a <a href="https://cloud.google.com/free/docs/free-cloud-features#storage">free tier for Cloud Storage</a> for some amount of Class A and B operations, so it would mask the costs of our requests.</p><p>Therefore, <a href="https://cloud.google.com/billing/docs/how-to/export-data-bigquery">detailed usage cost data</a> was exported to BigQuery and analyzed using SQL, where we could see the charges for operations even if they would fall in this free tier or be subjected to credits, discounts and promotions.</p><p>This cost data is exported to BigQuery with some latency (usually several hours, depending on service and SKU), so results were checked after 24 hours.</p><h3>Simulating unauthorized access: the experiment</h3><p>2 Google Cloud projects were created:</p><ol><li><em>gcs-unauthorized-requests</em></li><li><em>gcs-requesting-instance</em></li></ol><p><em>Note: Usually you would want to keep your project IDs private for security.</em></p><h4>Billing</h4><p>Billing was configured for both projects with an active, good-standing billing account, with detailed usage cost data exported to BigQuery.</p><h4>Details for gcs-unauthorized-requests project</h4><ul><li>Required roles: Cloud Storage Admin</li><li>Enabled APIs: Cloud Storage (<em>storage.googleapis.com</em>), BigQuery (<em>bigquery.googleapis.com</em>, to analyze exported billing data, could also be run in another project)</li><li>Cloud Storage resources: location — <em>regional</em>, <em>europe-southwest1</em>, storage class — <em>standard</em></li><li>Private bucket: bucket-name-redacted, label bucket-private</li></ul><h4>Details for gcs-requesting-instance project</h4><ul><li>Required roles: Compute Engine Admin, Service Account Admin</li><li>Enabled APIs: Compute Engine (<em>compute.googleapis.com</em>)</li><li>Networking — VPC &amp; subnet: <em>default</em></li><li>Networking — FW rules: <em>default </em>VPC default rules → SSH ingress enabled, all egress enabled</li><li>VM instance: <em>requesting-instance</em></li><li>Region &amp; zone: <em>europe-southwest1-a</em> (Madrid)</li><li>Machine type: <em>e2-standard-16</em> (max. egress bandwidth of 16 Gbps)</li></ul><blockquote>(Would have been less expensive and recommended to use a spot VM instead of a regular one, but forgot to check the option… <em>oops</em>)</blockquote><ul><li>VM instance OS: Debian 12 (bookworm) boot disk from the GCP public image family</li><li>VM instance has GCP Cloud SDK already installed, as by default in (most) GCE images</li><li>VM instance with an <em>ephemeral external IP</em></li><li>User-managed service account assigned to the VM <strong>without any roles/permissions assigned</strong>, to force a 403 response</li></ul><h3>The test</h3><p>Test consisted in SSHing to requesting-instance VM and running this Bash command executing a 403 PUT request to the GCS bucket 2100 times (<em>more than the 1000 needed, just in case</em>):</p><pre>for i in {1..2100};<br>do<br>  printf &quot;\niter $i\n&quot; &amp;&amp; \<br>  gsutil cp private-bucket-file.txt \<br>    gs://gcs-unauthorized-request-private;<br>done</pre><p>BigQuery SQL query for checking results (after 24 hours, given the expected delay for the billing export):</p><pre>SELECT<br>  project.id as project_id,<br>  service.description as service_description,<br>  sku.description as sku_description,<br>  usage_start_time,<br>  usage_end_time,<br>  project.id,<br>  labels,<br>  location.region,<br>  resource.global_name,<br>  usage.amount,<br>  usage.unit,<br>  usage.amount_in_pricing_units,<br>  usage.pricing_unit<br>FROM<br>  `REDACTED.billing_export.gcp_billing_export_resource_v1_REDACTED`<br>WHERE<br>  usage_start_time &gt;= TIMESTAMP(&quot;2024-05-03&quot;)<br>  AND usage_start_time &lt; TIMESTAMP(&quot;2024-05-08&quot;)<br>  AND (project.id = &#39;gcs-unauthorized-requests&#39;<br>    OR project.id = &#39;gcs-requesting-instance&#39;)<br>  AND service.description = &#39;Cloud Storage&#39;<br>ORDER BY<br>  usage_start_time</pre><h3>Experiment results</h3><p>Remember: we wanted to check if 403 PUT requests to a private GCS bucket are billed.</p><p>After executing the previous bash command:</p><ul><li>Response status code: 403</li><li>Response: “AccessDeniedException: 403 <a href="mailto:requesting-instance@gcs-requesting-instance.iam.gserviceaccount.com">REDACTED@gcs-requesting-instance.iam.gserviceaccount.com</a> does not have storage.objects.create access to the Google Cloud Storage object.<br>Permission ‘storage.objects.create’ denied on resource (or it may not exist).”</li><li>Number of requests: 2100</li><li>Start: 24/05/07 08:26 CEST</li><li>End: 24/05/07 09:19 CEST</li></ul><p>After waiting +24 hours, we ran the query in the BigQuery billing dataset.</p><blockquote><strong>SQL query results: </strong>No “Regional Standard Class A Operations” were shown for these projects and dates</blockquote><h3>Verdict: No charges for unauthorized access</h3><p>The good news: Google Cloud Storage doesn’t bill for unauthorized PUT requests, neither to the private bucket owner nor the unauthorized requester.</p><h4>What This Means for You</h4><p>Unlike AWS S3, Google Cloud Storage protects you from this “Denial-of-Wallet” attack where unauthorized access can inflate your bill. This adds another layer of security and cost control for your Cloud Storage buckets.</p><h3>Further Exploration</h3><p>While unauthorized PUT requests are free, we plan to investigate billing for other access scenarios, including unauthorized GET requests and public bucket access attempts. In particular,</p><ol><li>Check if 403 GET requests to a private GCS bucket existing file are billed</li><li>Check if 403 GET requests to a private GCS bucket non-existing file are billed</li><li>Check if 403 PUT requests to a public GCS bucket are billed</li><li>Check if 403 GET requests to a public GCS bucket non-existing file are billed</li></ol><h4>Special thanks to</h4><ul><li><a href="https://cloud.google.com/innovators/champions">Google Cloud Champions Innovator program</a>, for their members’ support and feedback.</li><li><a href="https://cloud.google.com/innovators/innovatorsplus">Google Cloud Innovators Plus program</a>, for their annual free GCP credits which were used for this (and many others) project.</li></ul><blockquote>This article was jointly written by Marcos Manuel Ortega (<a href="https://www.linkedin.com/in/marcosmanuelortega/">LinkedIn</a>), director at Indavelopers, and Julio Quinteros P. (<a href="https://twitter.com/jquinterosp">@jquinterosp</a>), Data &amp; AI/ML manager/practice lead at Axmos</blockquote><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8d4d6551fe72" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/billed-for-unauthorized-requests-google-cloud-storage-vs-aws-s3-8d4d6551fe72">Billed for unauthorized requests? Google Cloud Storage vs. AWS S3</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google Cloud SLO demystified: Uncovering metrics behind predefined SLOs]]></title>
            <link>https://medium.com/google-cloud/google-cloud-slo-demystified-uncovering-metrics-behind-predefined-slos-40b153970479?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/40b153970479</guid>
            <category><![CDATA[observability]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[sre]]></category>
            <category><![CDATA[gcp-security-operations]]></category>
            <category><![CDATA[reliability]]></category>
            <dc:creator><![CDATA[minherz]]></dc:creator>
            <pubDate>Sat, 11 May 2024 04:43:14 GMT</pubDate>
            <atom:updated>2024-05-11T04:43:14.226Z</atom:updated>
            <content:encoded><![CDATA[<p><em>This post is mirrored from my personal website </em><a href="https://leoy.blog"><em>leoy.blog</em></a><em>. See reader-friendly </em><a href="https://leoy.blog/posts/google-cloud-slo-demystified/"><em>original</em></a><em>. This material was prepared with help from </em><a href="https://www.linkedin.com/in/ethantruong/"><em>Ethan Truong</em></a><em>.</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/799/1*MHwc3EM1GjxKpsDXL3YCTQ.png" /></figure><p>Google Cloud supports <a href="https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring"><strong>service monitoring</strong></a> by defining and tracking <a href="https://en.wikipedia.org/wiki/Service-level_objective"><strong>SLO</strong></a> of the services based on their metrics that are ingested to Google Cloud. This support greatly simplifies implementing SRE practices for services that are deployed to Google Cloud or that store telemetry data there. To make it even more simple to developers, the service monitoring is able to automatically detect many types of managed services and supports predefined <em>availability</em> and <em>latency</em> <a href="https://en.wikipedia.org/wiki/Service_level_indicator"><strong>SLI</strong></a> definitions for them.<br>When you define a new SLO you are prompted to select a predefined SLI or to define your own.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/757/0*78QiebDtoB3PG1KF.png" /></figure><p>While it is convenient to use predefined SLIs you aren’t provided with information about SLI definitions. If you already defined an SLO using one of predefined SLIs, you can get its detailed description using the <a href="https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives/get"><strong>services.serviceLevelObjectives.get</strong></a> API. For example, the following command returns JSON payload that describes the SLO named availability_slo of the frontend service that was defined using the predefined availability SLI:</p><pre>curl -X GET \<br>https://monitoring.googleapis.com/v3/projects/${GOOGLE_CLOUD_PROJECT}/\<br>services/frontend/\<br>serviceLevelObjectives/frontend-availability-slo?view=EXPLICIT \<br>-H &quot;Authorization: Bearer $(gcloud auth print-access-token)&quot; \<br>-H &quot;Content-Type: application/json; charset=utf-8&quot;</pre><p>This example uses gcloud <a href="https://cloud.google.com/sdk/gcloud"><strong>CLI</strong></a> and the environment variable GOOGLE_CLOUD_PROJECT. This variable is automatically set by <a href="https://cloud.google.com/shell/docs/launching-cloud-shell"><strong>Cloud Shell</strong></a>. However, if you run this command in your shell, you will need to <a href="https://cloud.google.com/sdk/docs/install-sdk"><strong>install</strong></a> gcloud, then to authenticate vs Google Cloud and to set up the GOOGLE_CLOUD_PROJECT environment variable to the project ID where your SLO is defined. The following paragraphs describe predefined SLIs to enable you to make an educated choice next time you use them.</p><h3>Managed (auto-detected) services</h3><p>The <a href="https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/using-api#managing-services"><strong>managed services</strong></a> generate metrics that are further used to calculate predefined SLIs. The service monitoring automatically detects these managed services or the user can provision them manually. As long as the service is defined as one of the basic services and uses one of the following types, it can leverage the predefined SLIs.</p><ul><li>APP_ENGINE – Every <a href="https://cloud.google.com/appengine/docs/standard/testing-and-deploying-your-app"><strong>deployed application</strong></a> is considered a service. This service can be monitored using multiple ways including SLOs.</li><li>ISTIO_CANONICAL_SERVICE – When vanilla Istio is configured to ingest its metrics to Cloud Monitoring, its services are auto-detected as Istio canonical services. GKE workloads that leverage the managed version of Istio (aka <a href="https://cloud.google.com/service-mesh"><strong>ASM</strong></a>) do not use this type.</li><li>CLUSTER_ISTIO – Services that run on GKE with ASM are identified as Cluster Istio services. Note that since ASM supports Kubernetes clusters on Azure and AWS you can implement service monitoring for these clusters as well.</li><li>CLOUD_RUN – Cloud Run <a href="https://cloud.google.com/run/docs/overview/what-is-cloud-run#services"><strong>services</strong></a> are auto-detected using this type. Important to remember that service monitoring does not support Cloud Run jobs.</li></ul><blockquote><strong>NOTE:</strong> Not all services that Service monitoring automatically detects, have predefined SLIs. For example, services of types GKE_SERVICE or GKE_WORKLOAD do not have predefined SLIs (because they do not ingest any metrics to Google Cloud).</blockquote><h3>Predefined SLIs</h3><p>All predefined SLIs are measured in % and calculated based on the well known formula of</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/321/0*SFvP6lTuqqsst9Qp.jpg" /></figure><p>The predefined SLIs use a <strong>resource type</strong> and a <strong>metric</strong> to get the event data. The <strong>availability metric</strong> is used to get availability events and the <strong>latency metric</strong> is used to get latency events. From all metric data the good events are derived using a <strong>good service filter</strong> and valid events — using the union of <strong>good service filter</strong> <em>AND</em> <strong>bad service filter</strong>. The filters are built using metric labels and leverage the fact that both availability and latency metrics have the same set of labels. You can use the following MQL query to see the <em>valid events</em>:</p><pre>fetch %%resource%%<br>| metric &#39;%%metric%%&#39;<br>| filter (%%good_service_filter%%) || (%%bad_service_filter%%)</pre><p>And this MQL query to see the <em>good events</em>:</p><pre>fetch %%resource%%<br>| metric &#39;%%metric%%&#39;<br>| filter %%good_service_filter%%</pre><blockquote><strong>NOTE:</strong> You will have to replace values enclosed with double percentage (%%) with the actual values of the predefined SLIs.</blockquote><h3>AppEngine service</h3><p>Detects both standard and flexible AppEngine services.</p><p><strong>Resource type</strong>: gae_app</p><p><strong>Availability metric</strong>: <a href="https://cloud.google.com/monitoring/api/metrics_gcp#appengine/http/server/response_count"><strong>appengine.googleapis.com/http/server/response_count</strong></a></p><p><strong>Latency metric</strong>: <a href="https://cloud.google.com/monitoring/api/metrics_gcp#appengine/http/server/response_latencies"><strong>appengine.googleapis.com/http/server/response_latencies</strong></a></p><p><strong>Good service filter</strong>:</p><pre>resource.module_id = &#39;MODULE_ID&#39; &amp;&amp;<br>metric.response_code &gt;= 200 &amp;&amp; metric.response_code &lt;= 299</pre><blockquote><strong>NOTE:</strong> MODULE_ID should be replaced with the actual AppEngine service/module name. See <a href="https://cloud.google.com/monitoring/api/resources#tag_gae_app"><strong>gae_app</strong></a> resource description for more information.</blockquote><p><strong>Bad service filter</strong>:</p><pre>resource.module_id = &#39;MODULE_ID&#39; &amp;&amp;<br>metric.response_code &gt;= 500 &amp;&amp; metric.response_code &lt;= 599</pre><h3>Canonical Istio service</h3><p>Detects Istio services provisioned by OSS Istio.</p><p><strong>Resource type</strong>: istio_canonical_service</p><p><strong>Availability metric</strong>: <a href="https://cloud.google.com/monitoring/api/metrics_istio#istio/service/server/request_count"><strong>istio.io/service/server/request_count</strong></a></p><p><strong>Latency metric</strong>: <a href="https://cloud.google.com/monitoring/api/metrics_istio#istio/service/server/response_latencies"><strong>istio.io/service/server/response_latencies</strong></a></p><p><strong>Good service filter</strong>:</p><pre>resource.mesh_uid = &#39;MESH_ID&#39; &amp;&amp;<br>resource.namespace_name = &#39;K8S_NAMESPACE&#39; &amp;&amp;<br>resource.canonical_service_name = &#39;K8S_SERVICE_NAME&#39; &amp;&amp;<br>metric.response_code &gt;= 200 &amp;&amp; metric.response_code &lt;= 299</pre><blockquote><strong>NOTE:</strong> MESH_ID should be replaced with the identifier for an Istio service mesh. K8S_NAMESPACE should be replaced with the namespace where the service is manifested. K8S_SERVICE_NAME should be replaced with the name of the <a href="https://cloud.google.com/service-mesh/docs/canonical-service"><strong>canonical service</strong></a>. See <a href="https://cloud.google.com/monitoring/api/resources#tag_istio_canonical_service"><strong>istio_canonical_service</strong></a> resource description for more information.</blockquote><p><strong>Bad service filter</strong>:</p><pre>resource.mesh_uid = &#39;MESH_ID&#39; &amp;&amp;<br>resource.namespace_name = &#39;K8S_NAMESPACE&#39; &amp;&amp;<br>resource.canonical_service_name = &#39;K8S_SERVICE_NAME&#39; &amp;&amp;<br>metric.response_code &gt;= 500 &amp;&amp; metric.response_code &lt;= 599</pre><h3>ASM service</h3><p>Detects the managed flavor of the Istio service. Used with Istio services provisioned by ASM, hence uses a different resource type.</p><p><strong>Resource type</strong>: k8s_container</p><p><strong>Availability metric</strong>: <a href="https://cloud.google.com/monitoring/api/metrics_istio#istio/service/server/request_count"><strong>istio.io/service/server/request_count</strong></a></p><p><strong>Latency metric</strong>: <a href="https://cloud.google.com/monitoring/api/metrics_istio#istio/service/server/response_latencies"><strong>istio.io/service/server/response_latencies</strong></a></p><p><strong>Good service filter</strong>:</p><pre>resource.cluster_name = &#39;CLUSTER_NAME&#39; &amp;&amp;<br>resource.location = &#39;LOCATION&#39; &amp;&amp;<br>resource.namespace_name = &#39;K8S_NAMESPACE&#39; &amp;&amp;<br>metric.destination_service_namespace = &#39;K8S_NAMESPACE&#39; &amp;&amp;<br>metric.destination_service_name = &#39;K8S_SERVICE_NAME&#39; &amp;&amp;<br>metric.response_code &gt;= 200 &amp;&amp; metric.response_code &lt;= 299</pre><blockquote><strong>NOTE:</strong> CLUSTER_NAME should be replaced with the name of the cluster running the service. LOCATION should be replaced with the location (either zone or region) of the service. K8S_NAMESPACE should be replaced with the namespace where the service is manifested. K8S_SERVICE_NAME should be replaced with the name of the service. See <a href="https://cloud.google.com/monitoring/api/resources#tag_k8s_container"><strong>k8s_container</strong></a> and the <a href="https://cloud.google.com/monitoring/api/metrics_istio#istio/service/server/request_count"><strong>metric</strong></a> descriptions for more information.</blockquote><p><strong>Bad service filter</strong>:</p><pre>resource.cluster_name = &#39;CLUSTER_NAME&#39; &amp;&amp;<br>resource.location = &#39;LOCATION&#39; &amp;&amp;<br>resource.namespace_name = &#39;K8S_NAMESPACE&#39; &amp;&amp;<br>metric.destination_service_namespace = &#39;K8S_NAMESPACE&#39; &amp;&amp;<br>metric.destination_service_name = &#39;K8S_SERVICE_NAME&#39; &amp;&amp;<br>metric.response_code &gt;= 500 &amp;&amp; metric.response_code &lt;= 599</pre><h3>Cloud Run service</h3><p>Detects a service deployed at Cloud Run.</p><p><strong>Resource type</strong>: cloud_run_revision</p><p><strong>Availability metric</strong>: <a href="https://cloud.google.com/monitoring/api/metrics_gcp#run/request_count"><strong>run.googleapis.com/request_count</strong></a></p><p><strong>Latency metric</strong>: <a href="https://cloud.google.com/monitoring/api/metrics_gcp#run/request_latencies"><strong>run.googleapis.com/request_latencies</strong></a></p><p><strong>Good service filter</strong>:</p><pre>resource.service_name = &#39;SERVICE_NAME&#39; &amp;&amp;<br>resource.location = &#39;LOCATION&#39; &amp;&amp;<br>metric.response_code_class = &#39;5xx&#39;</pre><blockquote><strong>NOTE:</strong> SERVICE_NAME should be replaced with the name of the Cloud Run service. LOCATION should be replaced with the region where the service is deployed. See <a href="https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision"><strong>cloud_run_revision</strong></a> for more information.</blockquote><p><strong>Bad service filter</strong>:</p><pre>resource.service_name = &#39;SERVICE_NAME&#39; &amp;&amp;<br>resource.location = &#39;LOCATION&#39; &amp;&amp;<br>metric.response_code_class = &#39;5xx&#39;</pre><h3>Afterword</h3><p>The predefined SLIs are used with the “<a href="https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring#slo-type-request"><strong>request-based</strong></a>” SLOs. This is because the auto-detected services communicate using requests. If you use the services differently or, in your case the metrics used in the predefined SLIs do not reflect good and valid events correctly, use <a href="https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/ui/create-slo#svcmon-sli-other"><strong>custom SLI</strong></a> for your availability and latency SLOs.</p><p>The shown filters values use syntax that is compatible with MQL. If you plan to reuse them in custom SLIs with <a href="https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/monitoring_slo"><strong>Terraform</strong></a> or by calling <a href="https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures"><strong>API</strong></a>, you should reformat it. The main changes include replacing &amp;&amp; with AND, changing the keys of the labels by adding label suffix (e.g. metric.response_code will become metric.label.response_code). Look into documentation for more guidelines.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=40b153970479" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/google-cloud-slo-demystified-uncovering-metrics-behind-predefined-slos-40b153970479">Google Cloud SLO demystified: Uncovering metrics behind predefined SLOs</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GCP Cross-region internal application load balancer : why and how]]></title>
            <link>https://medium.com/google-cloud/gcp-cross-region-internal-application-load-balancer-why-and-how-f3a33226d690?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/f3a33226d690</guid>
            <category><![CDATA[load-balancer]]></category>
            <category><![CDATA[infrastructure]]></category>
            <category><![CDATA[networking]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <dc:creator><![CDATA[Gauravmadan]]></dc:creator>
            <pubDate>Sat, 11 May 2024 04:42:52 GMT</pubDate>
            <atom:updated>2024-05-11T04:42:52.833Z</atom:updated>
            <content:encoded><![CDATA[<h3>GCP Cross-region internal application load balancer : why and how</h3><p>Context :</p><p>A Google Cloud<strong><em> internal Application Load Balancer</em></strong> is a proxy-based layer 7 load balancer that enables you to run and scale your services behind a single internal IP address. The internal Application Load Balancer distributes HTTP and HTTPS traffic to backends hosted on a variety of Google Cloud platforms such as Compute Engine, Google Kubernetes Engine (GKE), and Cloud Run. This load balancer is available in 2 flavors :</p><ol><li>Regional internal application load balancer</li><li>Cross-regional internal application load balancer</li></ol><p>The cross-region internal application load balancer enables you to load balance traffic to backend services that are globally distributed, including traffic management that ensures traffic is directed to the closest backend.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/911/0*1RXP-_RyrxR_ngJ6" /></figure><p>The idea of this blog post is to see how cross-regional internal application load balancer is deployed and its use-cases under steady state and failover situations.</p><p>Failover may fall in 2 categories : (a) failover of a regional backend (b) failover of iLB frontend</p><ul><li>Failover of Frontend: When the proxy tasks in a region (where the forwarding rule is configured) fail. Failover to a forwarding rule in a different region is done using a DNS failover policy.</li><li>Failover of Backend: When all of the backends (e.g. VM instances) in a region fail, the load balancer automatically chooses healthy, available backends in the next closest region.</li></ul><h3>Topology</h3><p>In the test topology used in this blog , I had one VPC with subnets in 2 regions : asia-south1 ( Mumbai) and asia-south2 ( Delhi ) . The CIDR used in each subnet is shown in the topology diagram below . These 2 subnets host the instance groups where web application servers are hosted.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*XsF-O-_jjjgd-dLW" /></figure><p>As a next step ( and a mandatory step ) for setting up cross regional internal application load balancer , it is necessary to reserve PROXY subnet for each region in context . In my example , I have reserved 2 proxy subnets ( one each for asia-south1 and asis-south2 )</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/742/0*jCHDHuwtb6bpguLO" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*tZyjIMJGJNJCbZ9h" /></figure><p>Setup Load balancer : Lets break this in 3 simple parts</p><ol><li>Front end setup</li><li>Backend setup</li><li>Routing rules</li></ol><p><strong>Front End :</strong> Create one front end per region . You may choose the protocol as HTTP or HTTPs for the front end . In our case , we had following configured for the front end</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*oRK2qM9x-wbnZ3K4" /></figure><p><strong>Backend</strong></p><p>Created one backend service</p><p>In this backend service → I created 2 backends . One for each regional instance group.In my case , each backend consist of instance groups running web server.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*fx1m5yQriei4epnU" /></figure><p>Sample output of load balancer backend service</p><pre>$ gcloud compute backend-services describe cross-region-bserv-for-ilb --global<br>affinityCookieTtlSec: 0<br>backends:<br>- balancingMode: UTILIZATION<br>  capacityScaler: 1.0<br>  group: https://www.googleapis.com/compute/v1/projects/gm-test-337806/zones/asia-south1-c/instanceGroups/lb-test-mumbai-umig<br>  maxRatePerInstance: 100.0<br>  maxUtilization: 0.8<br>- balancingMode: UTILIZATION<br>  capacityScaler: 1.0<br>  group: https://www.googleapis.com/compute/v1/projects/gm-test-337806/zones/asia-south2-a/instanceGroups/lb-test-delhi-01<br>  maxRatePerInstance: 100.0<br>  maxUtilization: 0.8<br>connectionDraining:<br>  drainingTimeoutSec: 300<br>creationTimestamp: &#39;2024-04-27T21:04:05.231-07:00&#39;<br>description: &#39;&#39;<br>fingerprint: WRypjLxKN0M=<br>healthChecks:<br>- https://www.googleapis.com/compute/v1/projects/gm-test-337806/global/healthChecks/auto-health<br>id: &#39;1322192009993155674&#39;<br>kind: compute#backendService<br>loadBalancingScheme: INTERNAL_MANAGED<br>localityLbPolicy: ROUND_ROBIN<br>logConfig:<br>  enable: false<br>  optionalMode: EXCLUDE_ALL_OPTIONAL<br>name: cross-region-bserv-for-ilb<br>port: 80<br>portName: lb-test-mumbai-http<br>protocol: HTTP<br>selfLink: https://www.googleapis.com/compute/v1/projects/gm-test-337806/global/backendServices/cross-region-bserv-for-ilb<br>sessionAffinity: NONE<br>timeoutSec: 30<br>usedBy:<br>- reference: https://www.googleapis.com/compute/v1/projects/gm-test-337806/global/urlMaps/cross-regional-internal-layer7</pre><h3>TEST # 1</h3><p>Client sending traffic to regional front-end :In this test , we assumed that regional clients will send traffic to respective iLB front end ; i.e Mumbai client sent traffic to ilB front end in Mumbai (asia-south1) and Delhi client sent requests to Delhi (asia-south2) front end</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*JQ_eqgNPJ7FLA4Km" /></figure><p>Test initiated from TEST-CLIENT-2 (Delhi region)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*nsf8Ldi_ft8FSE8Ard0sSA.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*wNpJFYX8rVZbXdpRiAJxVA.png" /></figure><p>This worked as expected . Customer relied on making separate entries in DNS for each front end and this was used by respective clients in their application access method. The load balancer served traffic from closest healthy backend available.</p><h3>TEST # 2</h3><p>Client sending traffic to cross-regional front-end : This is continuation of test case 1 , where the requirement is to access a workload in a cross-region ; i.e. client in asia-south1 (Mumbai) trying to access workload in asia-south2 by accessing front end name / IP of layer7 iLB in asia-south2 region</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*5xlcWKelOS-SYrhF" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4gFU4GGLPR868OnKlK-chg.png" /></figure><p>Hence , once the requests land on a iLB frontend , it tries to route it to a healthy backend nearest to it</p><h3>TEST # 3</h3><p>Failover Scenario : In this case , let’s assume service in asia-south2 failed ( Or all VMs down ) . For simulation in my setup , I removed the backend in Delhi region from the iLB backend service configuration.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*5V3H5pYuX7hmvtDc" /></figure><p>Lets see the results</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*NPgfHr0OtxKuAAAPfwG98Q.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zz7jqMMh8ezDuhxHai22CQ.png" /></figure><p>Hence , as expected , in event of no healthy backend , the iLB will redirect the traffic to healthy backends in next closest region.</p><h3>TEST # 4</h3><p>Combining Cross region ILB functionality with GCP CLOUD DNS GEO routing POLICY</p><p>This is most interesting usecase . Here ; instead of using separate domain names for application hosted in asia-south1 / asia-south2, the customer created a domain name called “<a href="http://application.myapp.com">application.myapp.com</a>”. In addition to this , customer created a GEO routing policy specifying region as ‘asia-south1’ resolve to 10.10.152.10 [ load balancer front end in asia-south1 ] and asia-south2 resolve ot 10.10.151.11 [ load balancer front end in asia-south1 ] . Sample DNS configuration is as follows -</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*u81MR6Lacpz10SnG" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*eNvPTqsf_g-1OAKE" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*A-AcPldmLJwaN4B4R8RFHQ.png" /></figure><p>When client attempted to access the app behind<strong> </strong><a href="http://application.myapp.com">application.myapp.com</a><strong> </strong>; the response came from the nearby region</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*w1m9uOolhhvormxUGHsUXg.png" /></figure><p>BACKEND FAILOVER ( no healthy backend in one of region )</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*QST9fnimdqhQMzGi" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0hChkmK94Q9SMUc8Qdhq9w.png" /></figure><p>Again , as expected , no matter which frontend IP the query lands , iLB send the request to nearby healthy backend. For example , if client in Delhi region sends request to front-end in Delhi-region of iLB , this will be routed to next near healthy backend ( which is Mumbai in my setup )</p><h3>TEST # 5</h3><p>This test has to do with failover of proxy task in a given region . This is where Failover Policy of Cloud DNS can come handy.</p><p>In this setup , customer needs to serve everything from Asia-south1 application instance and if this is not available / reachable ; asia-south2 instance shall be considered .</p><p>Lets look at Cloud DNS Failover Policy</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7fuPsVppPUXHl6cxa31kaA.png" /></figure><p>This simply means that clients will resolve to iLB frontend IP address in Asia-south1 ( 10.10.152.10 ) and if this isnt reachable ; clients in both regions will resolve app1.myapp.com to iLB front-end IP in asia-south2 ( 10.10.151.12 )</p><p>Hence in steady state the setup will work like follows</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*sQ5ubMo1PNetYpbPngKuUQ.png" /></figure><p>However in case of Front end fail , the setup will work like following</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*93E6z75MsUUVRDhMInYsRw.png" /></figure><p>Useful URLs</p><p><a href="https://cloud.google.com/load-balancing/docs/l7-internal/setting-up-l7-cross-reg-internal">Setup cross-regional internal L7 load balancer</a></p><p><strong>Disclaimer</strong>: This is to inform readers that the views, thoughts, and opinions expressed in the text belong solely to the author, and not necessarily to the author’s employer, organization, committee or other group or individual.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f3a33226d690" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/gcp-cross-region-internal-application-load-balancer-why-and-how-f3a33226d690">GCP Cross-region internal application load balancer : why and how</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[API to Chatbot in less than 5 minutes | Vertex AI Extensions]]></title>
            <link>https://medium.com/google-cloud/api-to-chatbot-in-less-than-5-minutes-27ad6c4a063d?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/27ad6c4a063d</guid>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[chatbots]]></category>
            <category><![CDATA[gemini]]></category>
            <category><![CDATA[vertex-ai]]></category>
            <dc:creator><![CDATA[Vaibhav Malpani]]></dc:creator>
            <pubDate>Fri, 10 May 2024 10:17:51 GMT</pubDate>
            <atom:updated>2024-05-10T10:17:51.650Z</atom:updated>
            <content:encoded><![CDATA[<p>Learn how to quickly create a chatbot over your API using Vertex AI Extensions. No coding or training required. Interact with your API seamlessly through a chat interface. Read more to explore the possibilities!</p><h3>What is API?</h3><p>An API (Application Programming Interface) serves as a bridge between various software programs. It defines a set of rules and requirements that apps may follow to interact with one another.</p><h3>What is Chatbot?</h3><p>A software program that simulates human-user conversations. Chatbots are frequently used in messaging apps, websites, and customer service to offer information or do tasks.</p><p><strong>Traditionally</strong>, a Chatbot is trained on intents to understand which data to be fetched, what all parameters are required and how to extract them from the prompt given by user and at the end format the API response for easy reading. This will improve readability for the user.</p><h4><strong>Problem Statement:</strong></h4><p>If any changes are made to API, like taking in a new parameter, change in the response from API, in that case, we will have to make the changes in the chatbot as well to handle the new changes. Similarly, if a new API is added, then the whole process of creating intent, extracting parameters, prettifying API response.</p><h4><strong>Solution:</strong></h4><p>Using Extension in Vertex AI, to build Chatbots over your API. How to do it?? Just follow the steps below!!</p><blockquote><strong>Disclaimer: Extensions in Vertex AI is still in PREVIEW. It </strong>Is under development and gaining functionalities.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*NzBLlx8ssBksQoAYY9f9Yg.jpeg" /><figcaption>AI Generated by SDXL 1.0</figcaption></figure><h4><strong>How to Build a Chatbot over your API?</strong></h4><ol><li>Create a sample <a href="https://swagger.io/docs/specification/basic-structure/"><strong><em>OpenAPI specification file</em></strong></a><strong><em> </em></strong>(only yaml file supported till now). I have used a sample file from <a href="https://petstore.swagger.io/#/"><strong>swagger</strong></a><strong> </strong>and trimmed down the file to only include API related to pets.</li><li>Login to Google cloud console, and navigate to <a href="https://console.cloud.google.com/vertex-ai/extensions"><strong>Extensions in Vertex AI</strong></a>. Click on “Create Extension”</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/967/1*XhAbnI0WjAi2LwiGO9NqRg.png" /></figure><p>3. Enter the name that you want to give to the extension, we have given name as “pet_store”. Then enter any description that you want and in the Extension Type, Click on <strong>“Custom”. </strong><em>(For other 2 Extension Types stay tuned and follow, I am going to soon write about them)</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/736/1*n4HJxa0_rimgxzJN0EoN5w.png" /></figure><p>4. Once you select Custom Extension Type, you will get a below form, just enter details according to your API. In the OpenAPI Spec file section, upload you YAML file created in STEP 1.</p><p>If there are no error, you would get the below confirmation as “No errors detected”. Along with that it will also list down all the APIs that are present in the YAML file. (as seen in the below image). For this demo, with will select “No Authentication”, but if your application requires authentication you can set that up in the “Authentication” dropdown.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/620/1*a1AYbiYTqah3RI1vpg6tGg.png" /></figure><p>5. Once the extension is created you would see a screen like shown below. This shows that your Chatbot is ready and you can query it in the below text box. Let us try some examples and check.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*VTDjZCc7YoZULPsMZN79Cw.png" /></figure><h4>Testing the Chatbot:</h4><ol><li>Lets try to create a new pet in our pet store. I just put the query as “add a pet” and it was quickly able to understand what are the required parameters to create a pet. So the bot asked me one by one to enter the name and then the id for our new pet. Once it got all the required information, it created the pet.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Xj_zCG3FaOXULUAbx4gNlw.jpeg" /></figure><p>2. Let’s try to get the information for our newly created pet. When I ask “get pet”, it understood that there is not API to get all pets and hence asked me for an id. Once the id is entered, the chatbot was able to fetch the information for the pet we just now created.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*aY_yRDGdq3PUsFbJ7COFOw.jpeg" /></figure><p>3. Let’s add one more pet. When queried for “add a pet”, it asked for the name, then id and then finally the status. Notice how it gave me the options for status (available, pending or sold). This is because these are the options mentioned in the YAML file for the status field.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GAioFu8z194NXUT8eqYVnA.jpeg" /></figure><p>4. Let’s try to get the new pet that we created. The Chatbot gets the complete information when the id is entered.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*AqY7U5u3i0Fqz3Kolsnd9Q.jpeg" /></figure><p>5. Now let us try to update the pet and see if the bot is able to handle it. So when I query “update pet”, it asks for the id, and then asks what field i need to update, is it name or status. So when I enter “status is sold”, it updates that and gives the response for the successful status update.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*vxeEJ46eOZUPZC9R70CPIg.jpeg" /></figure><p>6. To be actually sure if the value is updated in backend or not, I tried to get the pet infomation. But this time, in the first query itself i have the id and did a query as “get pet 123”. This time the Chatbot got the id and did not ask again for the id. In the very next step, it has come back with the response saying the pet with id 123 is sold.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1013/1*XnLPpJCCto9yMK2FT4YuXg.jpeg" /></figure><p>7. Finally, lets now try to delete the pet. When I query “delete pet”, the Chatbot asks me for the id, and when the id is entered it deletes that entry for pet with id 123.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1010/1*4opSTPvFIBWlGFsfxmjObg.jpeg" /></figure><p>As seen above, We were able to interact with our API, perform CRUD operations (Create, Read, Update, Delete) through the Chatbot which required no training, no coding!!</p><h3>Opportunities for improvement<strong>:</strong></h3><ol><li>It only supports Content Type with “application/JSON” for input and output.</li><li>Currently it does not work with query parameters.</li><li>There should be an option to update the YAML file once uploaded. Currently to update the YAML, you would have to delete the old Extension and create a new one.</li><li>Currently it only supports calling the Chatbot through REST API or through GCP console. It would be great to have it integrated in the Vertex AI SDK.</li></ol><h3>Conclusions:</h3><ol><li>It have become very easy to create a Chatbot over your APIs.</li><li>You won’t have to train the Chatbot again once new APIs are added.</li><li>You won’t have to manage the context and parameter values given by the user.</li></ol><h3>If you enjoyed this post, give it a clap! 👏 👏</h3><h3>Interested in similar content? Follow me on <a href="https://medium.com/@IVaibhavMalpani">Medium</a>, <a href="https://twitter.com/IVaibhavMalpani">Twitter</a>, <a href="https://www.linkedin.com/in/ivaibhavmalpani/">LinkedIn</a> for more!</h3><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=27ad6c4a063d" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/api-to-chatbot-in-less-than-5-minutes-27ad6c4a063d">API to Chatbot in less than 5 minutes | Vertex AI Extensions</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Unlocking Codebase Insights with Vertex AI Gemini 1.5 Pro: A Comprehensive Guide]]></title>
            <link>https://medium.com/google-cloud/unlocking-codebase-insights-with-vertex-ai-gemini-1-5-pro-a-comprehensive-guide-1f40a6f488e9?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/1f40a6f488e9</guid>
            <category><![CDATA[generative-ai]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[gemini]]></category>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[vertex-ai]]></category>
            <dc:creator><![CDATA[aakash gouda]]></dc:creator>
            <pubDate>Fri, 10 May 2024 10:16:57 GMT</pubDate>
            <atom:updated>2024-05-10T10:16:57.525Z</atom:updated>
            <content:encoded><![CDATA[<h3>Introduction</h3><p>Vertex AI Gemini 1.5 Pro, with its remarkable 1 million token context window, revolutionizes code analysis. This advanced large language model empowers developers to gain deeper insights, streamline workflows, and enhance code quality. This blog delves into the capabilities of Gemini 1.5 Pro, demonstrating its prowess in various code-related tasks.</p><p>The tutorial utilizes the “Online Boutique” GitHub repository, a microservices demo application, as the codebase for analysis. After setting up the environment and installing necessary libraries, the code is processed to create an index and extract relevant text for Gemini 1.5 Pro to analyze.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xBPBo2-MHYXAMQVJE_KNCA.png" /></figure><h3>Harnessing Gemini 1.5 Pro’s Power</h3><p><strong>Codebase Summarization:</strong> Say goodbye to manually sifting through thousands of lines of code. Gemini 1.5 Pro can automatically generate concise and informative summaries of your codebase, highlighting key components, functionalities, and relationships. This saves you valuable time and provides a high-level overview for onboarding new developers or revisiting older projects.</p><pre>prompt = &quot;&quot;&quot;<br>  Give me a summary of this codebase, and tell me the top 3 things that I can learn from it.<br>&quot;&quot;&quot;</pre><p><strong>Developer Onboarding:</strong> Generating a comprehensive getting started guide becomes a breeze. Gemini 1.5 Pro can create step-by-step instructions and documentation, simplifying the onboarding process for new developers.</p><pre>prompt = &quot;&quot;&quot;<br>  Provide a getting started guide to onboard new developers to the codebase.<br>&quot;&quot;&quot;</pre><p><strong>Bug Detection</strong>: Uncovering critical issues is crucial for maintaining code quality. Gemini 1.5 Pro analyzes the codebase and pinpoints the top three most severe bugs, aiding developers in prioritizing fixes.</p><pre>prompt = &quot;&quot;&quot;<br>  Find the top 3 most severe issues in the codebase.<br>&quot;&quot;&quot;</pre><p><strong>Bug Fixing</strong>: Not only can Gemini 1.5 Pro identify bugs, it can also suggest code fixes. By analyzing the code and understanding the context, it offers potential solutions to resolve identified issues.</p><pre>prompt = &quot;&quot;&quot;<br>  Find the most severe bug in the codebase that you can provide a code fix for.<br>&quot;&quot;&quot;</pre><p><strong>Feature Implementation</strong>: Implementing new features can be streamlined with Gemini 1.5 Pro’s function-calling capabilities. By leveraging tools like GitHub issue extraction, the model can understand feature requests and generate code for their implementation.</p><pre>prompt = (<br>                &quot;Implement the following feature request&quot;<br>                + FEATURE_REQUEST_URL<br>                + &quot;\n&quot;<br>                + issue_data[&quot;body&quot;]<br>            )</pre><p><strong>Troubleshooting Guide</strong>: Creating a troubleshooting guide becomes efficient. Gemini 1.5 Pro analyzes common issues and provides step-by-step solutions, assisting developers in resolving problems effectively.</p><pre>prompt = &quot;&quot;&quot;<br>    Provide a troubleshooting guide to help resolve common issues.<br>&quot;&quot;&quot;</pre><p><strong>Reliability Enhancement:</strong> Gemini 1.5 Pro suggests best practices and improvements to enhance application reliability. By referencing external resources and analyzing code structure, it recommends strategies to ensure stable performance.</p><pre>prompt = &quot;&quot;&quot;<br>  How can I make this application more reliable? Consider best practices from https://www.r9y.dev/<br>&quot;&quot;&quot;</pre><p><strong>Security Enhancement:</strong> Security is paramount. Gemini 1.5 Pro helps identify potential vulnerabilities and recommends best practices to make the application more secure.</p><pre>prompt = &quot;&quot;&quot;<br>  How can you secure the application?<br>&quot;&quot;&quot;</pre><p><strong>Knowledge Reinforcement: </strong>Solidify your understanding of the codebase with a quiz generated by Gemini 1.5 Pro. The model creates questions based on the concepts used in the code, promoting knowledge retention and comprehension.</p><pre>prompt = &quot;&quot;&quot;<br>  Create a quiz about the concepts used in my codebase to help me solidify my understanding.<br>&quot;&quot;&quot;</pre><p><strong>Component Tutorials:</strong> Creating quickstart tutorials for specific components is simplified. Gemini 1.5 Pro provides end-to-end guidance, including configuration steps and highlighting key capabilities within the application context.</p><pre>prompt = &quot;&quot;&quot;<br>  Please write an end-to-end quickstart tutorial that introduces AlloyDB,<br>  shows how to configure it with the CartService,<br>  and highlights key capabilities of AlloyDB in context of the Online Boutique application.<br>&quot;&quot;&quot;</pre><p><strong>Git Changelog Generation:</strong> Understanding changes between Git commits is essential. Gemini 1.5 Pro analyzes Git diffs and summarizes the most important aspects of the changes, providing developers with clear insights into code evolution.</p><pre>prompt = &quot;&quot;&quot;<br>  Given the below git diff output, Summarize the important changes made.<br>&quot;&quot;&quot;</pre><h3><strong>Conclusion</strong></h3><p>Vertex AI Gemini 1.5 Pro empowers developers to analyze codebases with unprecedented efficiency and depth. From summarization and bug fixing to feature implementation and security enhancement, the model offers a comprehensive suite of capabilities to optimize workflows and enhance code quality. By leveraging Gemini 1.5 Pro, developers can unlock valuable insights and streamline the development process, ultimately building more robust and secure applications.</p><p>Special Thanks to <a href="https://medium.com/u/5644dc670e09">Eric Dong</a> for code and prompts development.</p><p>Link to <a href="https://github.com/GoogleCloudPlatform/generative-ai/blob/main/gemini/use-cases/code/analyze_codebase_with_gemini_1_5_pro.ipynb">full code</a>.</p><h3>References:</h3><ul><li><a href="https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/">https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/</a></li><li><a href="https://cloud.google.com/vertex-ai?hl=en">https://cloud.google.com/vertex-ai?hl=en</a></li></ul><p>Thanks for reading.</p><p><em>Your feedback and questions are highly appreciated. You can connect with me via </em><a href="https://www.linkedin.com/in/aakash-gouda/">LinkedIn</a><em>.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1f40a6f488e9" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/unlocking-codebase-insights-with-vertex-ai-gemini-1-5-pro-a-comprehensive-guide-1f40a6f488e9">Unlocking Codebase Insights with Vertex AI Gemini 1.5 Pro: A Comprehensive Guide</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Setup Temporary elevated access for Google Cloud with PAM]]></title>
            <link>https://medium.com/google-cloud/setup-temporary-elevated-access-for-google-cloud-with-pam-1ed98d6098b3?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/1ed98d6098b3</guid>
            <category><![CDATA[security]]></category>
            <category><![CDATA[privilege-escalation]]></category>
            <category><![CDATA[iam-roles]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[gcp-security-operations]]></category>
            <dc:creator><![CDATA[Damian Sztankowski]]></dc:creator>
            <pubDate>Fri, 10 May 2024 05:50:10 GMT</pubDate>
            <atom:updated>2024-05-10T05:50:10.847Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*K83VzvK4cZWYiMUiLK9A2w.png" /></figure><h3>Intro</h3><p>I was fighting recently with approach for granting time-based access to my organization. I didn’t wanted to use 3rd party solution like CyberArk (which is super great). I wanted to utilize something cloud native, provided by vendor. I found open-community project called “Just-in-time”. That was fantastic approach at that time. But today I’ve discovered that Google Cloud pushed into Pre-GA phase service called Privileged Access Manager (PAM)</p><p>➡️ More info about JIT <a href="https://cloud.google.com/architecture/manage-just-in-time-privileged-access-to-project">here</a></p><h3>Short info about PAM</h3><p>Privileged Access Manager (PAM) is a security solution designed to manage, monitor, and secure access to privileged accounts within an organization’s IT infrastructure. These privileged accounts typically have elevated permissions and access to sensitive resources, making them a prime target for cyber attackers.</p><p>You can use PAM in following situations:</p><ul><li>As a general practice, instead of permanently granting roles. Combined with approvals and justifications, this lets you manage access to sensitive resources without resorting to permanently over-permissioned principals. You can also use PAM to audit when granted roles were active for a principal, what resources were accessible during that time, what the justification was for that access, and who approved the access.</li><li>For select emergency responders, to allow them to perform critical tasks without having to wait for approval. You can require justifications for additional context on why the emergency access is needed.</li><li>For service accounts, to only grant them roles when they need the roles to perform an automated task.</li><li>For contractors, to allow temporary access to resources during business hours that requires approvals and justifications.</li></ul><h3>How to enable PAM</h3><p>PAM can be configured at the organization, folder, or project level. You need also mandatory permissions to do that, so before you start:</p><p>Grant you the following IAM roles on the organization, folder, or project:</p><ul><li>To create, update, and delete entitlements: Privileged Access Manager Admin (roles/privilegedaccessmanager.admin). Additionally, either Folder IAM Admin (roles/resourcemanager.folderIamAdmin), Project IAM Admin (roles/resourcemanager.projectIamAdmin), or Security Admin (roles/iam.securityAdmin)</li><li>To view entitlements and grants: <a href="https://cloud.google.com/iam/docs/understanding-roles#privilegedaccessmanager.viewer">Privileged Access Manager Viewer </a>(roles/privilegedaccessmanager.viewer)</li><li>To view audit logs: <a href="https://cloud.google.com/iam/docs/understanding-roles#logs.viewer">Logs Viewer </a>(roles/logs.viewer)</li></ul><p>The following permissions are required to work with entitlements and grants:</p><ul><li>To enable PAM at the organization, folder, or project scope:</li><li>privilegedaccessmanager.locations.checkOnboardingStatus</li><li>resourcemanager.organizations.get</li><li>resourcemanager.organizations.getIamPolicy</li><li>resourcemanager.organizations.setIamPolicy</li><li>resourcemanager.folders.get</li><li>resourcemanager.folders.getIamPolicy</li><li>resourcemanager.folders.setIamPolicy</li><li>resourcemanager.projects.get</li><li>resourcemanager.projects.getIamPolicy</li><li>resourcemanager.projects.setIamPolicy</li><li>To manage entitlements and grants:</li><li>resourcemanager.folders.get</li><li>resourcemanager.organizations.get</li><li>resourcemanager.projects.get</li><li>privilegedaccessmanager.entitlements.create</li><li>privilegedaccessmanager.entitlements.delete</li><li>privilegedaccessmanager.entitlements.get</li><li>privilegedaccessmanager.entitlements.list</li><li>privilegedaccessmanager.entitlements.setIamPolicy</li><li>privilegedaccessmanager.grants.get</li><li>privilegedaccessmanager.grants.list</li><li>privilegedaccessmanager.grants.revoke</li><li>privilegedaccessmanager.locations.get</li><li>privilegedaccessmanager.locations.list</li><li>privilegedaccessmanager.operations.delete</li><li>privilegedaccessmanager.operations.get</li><li>privilegedaccessmanager.operations.list</li><li>To view entitlements and grants:</li><li>resourcemanager.folders.get</li><li>resourcemanager.organizations.get</li><li>resourcemanager.projects.get</li><li>privilegedaccessmanager.entitlements.get</li><li>privilegedaccessmanager.entitlements.list</li><li>privilegedaccessmanager.grants.get</li><li>privilegedaccessmanager.grants.list</li><li>privilegedaccessmanager.locations.get</li><li>privilegedaccessmanager.locations.list</li><li>privilegedaccessmanager.operations.get</li><li>privilegedaccessmanager.operations.list</li><li>To view audit logs: logging.logEntries.list</li></ul><p>You might also be able to get these permissions with <a href="https://cloud.google.com/iam/docs/creating-custom-roles">custom roles</a> or other <a href="https://cloud.google.com/iam/docs/understanding-roles">predefined roles</a>.</p><p>➡️ More info about managing accesses can be found <a href="https://cloud.google.com/iam/docs/granting-changing-revoking-access">here</a></p><p>Once granted, complete following steps to enable PAM:</p><ol><li>Go to the <strong>Privileged Access Manager</strong> page.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/637/1*3guT0c9zLqp8yYEBwBY5Cw.png" /><figcaption>Fig1. PAM</figcaption></figure><p>2. Select the organization, folder, or project that you want to enable PAM for.</p><p>ℹ️ Enabling PAM for an organization or folder also enables PAM for all folders and projects below them in the <a href="https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy">resource hierarchy</a>.</p><p>3. Click <strong>Enable PAM</strong> to enable the service for the selected resource scope. 4. When asked to grant the <strong>Privileged Access Manager Service Agent</strong> role to the <a href="https://cloud.google.com/iam/docs/service-account-types#service-agents">Privileged Access Manager Service Agent</a> to manage privilege escalations, click <strong>Grant role</strong>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/776/1*AQ6v4M_B9nHjps7pIuX4pQ.png" /><figcaption>Fig2. Complete setup for PAM</figcaption></figure><p>5. Click <strong>Complete setup</strong>.</p><h3>How to create entitlements</h3><p>Once PAM has been enabled, we are able to create entitlements.</p><blockquote>Entitlements can be created at the organization, folder, or project level. Roles granted by an entitlement at each level follow the Google Cloud <a href="https://cloud.google.com/iam/docs/resource-hierarchy-access-control">resource hierarchy</a>.</blockquote><blockquote>For example, roles granted by an entitlement at the organization level are inherited at the folder and project levels.</blockquote><blockquote><a href="https://cloud.google.com/iam/docs/pam-create-entitlements">https://cloud.google.com/iam/docs/pam-create-entitlements</a></blockquote><h4>Before you begin</h4><p>Make sure you have <a href="https://cloud.google.com/iam/docs/pam-permissions-and-setup">enabled PAM and set up permissions for it</a>.</p><p>To create entitlements complete following steps:</p><ol><li>Go to the <strong>Privileged Access Manager</strong> page.</li><li>Select the organization, folder, or project you want the entitlement to apply to.</li><li>Click the <strong>Entitlements</strong> tab.</li><li>Click <strong>Create</strong>.</li><li>You will see following image. Fill out mandtary fields (marked with red asteriks)</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/520/1*1XzpPe38nFrZC22fzFL1NQ.png" /><figcaption>Fig3. Entitlement for SQL Admin example</figcaption></figure><p>6. Add requestors. You can add email group (best approach) or individual principal</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/551/1*veB9fw1zS5wkA17cNWTk1g.png" /><figcaption>Fig4. Adding requestors to entitlement</figcaption></figure><p>7. Add approvers. You can add email group or single principal as approver. Additionally, you can configure entitlement to being approved automatically by ticking “Activate access without approvals” checkbox.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/537/1*2X7aj1G7S3ueS6x_YoF7UA.png" /><figcaption>Fig5. Adding approvers</figcaption></figure><p>8. You can add additional notifications emails if for example you want to notify customers also about entitlement.</p><blockquote>Add the email addresses of people to notify when the entitlement is available to request, when a grant is pending approval, and when a requester is granted access. Google identities associated with the entitlement, like approvers and requesters, are automatically notified. However, you might want to notify a different set of email addresses, especially if you’re using <a href="https://cloud.google.com/iam/docs/workforce-identity-federation">Workforce Identity Federation</a>.</blockquote><blockquote><a href="https://cloud.google.com/iam/docs/pam-create-entitlements">https://cloud.google.com/iam/docs/pam-create-entitlements</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/526/1*3P0BjHgaihkTMPIhM_gj6Q.png" /><figcaption>Fig6. Additional notifications</figcaption></figure><p>9. Click <strong>Create Entitlement</strong>.</p><p>ℹ️ You can use also condition(s) to configure more restricted accesses. More info <a href="https://cloud.google.com/iam/docs/conditions-overview">here</a></p><p>10. Once done, you should get information about assignment on your email.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*dpeY2waBVlggPSxP2ck0nw.png" /><figcaption>Fig7. Assignment information</figcaption></figure><p>ℹ️ You are able also to configure PAM programatically. More info <a href="https://cloud.google.com/iam/docs/pam-create-entitlements#create_entitlements_programmatically">here</a></p><h3>How to use PAM</h3><h4>Requestor side</h4><p>Before you begin, you must have access to project, folder or organization where access will be requested.</p><p>If you have mentioned access, complete following steps to send a request for particular entitlement via PAM.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/803/1*pxfxsnokWVDUL2g3NcdveQ.png" /><figcaption>Fig8. Lack of SQL permissions</figcaption></figure><ol><li>Go to the <strong>Privileged Access Manager</strong> page.</li><li>Select the organization, folder, or project you want to request a grant in.</li><li>In the <strong>My entitlements</strong> tab, find the entitlement to request against, and then click <strong>Request grant</strong> in the same row.</li></ol><p>4. Provide the following details:</p><ul><li>The duration required for the grant, up to the maximum duration set on the entitlement.</li><li>If required, a justification for the grant.</li><li>Optional: Which email addresses to notify of the grant request. Google identities associated with approvers are automatically notified. However, you might want to notify a different set of email addresses, especially if you’re using <a href="https://cloud.google.com/iam/docs/workforce-identity-federation">Workforce Identity Federation</a>.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FW9ggjsRavYWjJw1S-Glqg.png" /><figcaption>Fig10. Providing details</figcaption></figure><p>5. Click <strong>Request grant</strong>.</p><p>6. To see your grant history including approval statuses, click the <strong>Grants</strong> tab, followed by the <strong>My grants</strong> tab.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*YDeyOTUjvg7-LoboEOMrfQ.png" /><figcaption>Fig11 Status</figcaption></figure><h4>Approver side</h4><p>As an approver you have big power. Remember, that YOU are not able to APPROVE YOUR REQUEST.</p><p>To approve / deny request complete following steps:</p><ol><li>Go to the <strong>Privileged Access Manager</strong> page.</li><li>Click the <strong>Approve grants</strong> tab, followed by the <strong>Pending approval</strong> tab.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*UPjtzXxBaqXz9gWqIe7d_g.png" /><figcaption>Fig12. Pending approvals</figcaption></figure><ol><li>In the row related to the request you want to approve or deny, click <strong>Approve/deny</strong>.</li><li>If a justification is required, enter it in the <strong>Comment</strong> field.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/562/1*_4R6jmWDMnKOWgtMD2JnpA.png" /><figcaption>Fig13. Approve / Deny request</figcaption></figure><p>3. Click either <strong>Approve</strong> or <strong>Deny</strong>.</p><p>4. All actions are audited</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1YXnKEcUYWaX9suo--8IrQ.png" /><figcaption>Fig14. Audit logs</figcaption></figure><p>Both approver and requestor receive related information about status request.</p><h3>How to revoke access</h3><p>It might be possible that you will be forced to revoke particular access due to any kind of reason.</p><p>Complete following steps to revoke already granted access:</p><p>To revoke a specific grant made against an entitlement, complete the following instructions:</p><ol><li>Go to the <strong>Privileged Access Manager</strong> page.</li><li>Select the organization, folder, or project you want to revoke grants in.</li><li>Click the <strong>Grants</strong> tab, followed by the <strong>Grants for all users</strong> tab. This contains all grants across all requesters, the grant statuses, and their associated entitlement details.</li><li>In the table, click more_vert <strong>More options</strong> in the same row as a grant you want to revoke.</li><li>To revoke an active grant, click <strong>Revoke grant</strong>.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/335/1*VhP5LRBl6xX-Hlxm2XynoA.png" /><figcaption>Fig15. Revoking access</figcaption></figure><p>To revoke all active grants made against an entitlement, complete the following instructions:</p><ol><li>Go to the <strong>Privileged Access Manager</strong> page.</li><li><a href="https://console.cloud.google.com/iam-admin/pam/entitlements/">Go to Privileged Access Manager</a></li><li>Click the <strong>Entitlements</strong> tab, followed by the <strong>Entitlements for all users</strong> tab. Here you can find the available entitlements, the roles they grant, and their valid requesters and approvers.</li><li>In the table, click more_vert <strong>More options</strong> in the same row as an entitlement you want to revoke the grants for.</li><li>Click <strong>Revoke all grants</strong>.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/387/1*po1AlgzU5R0ggF7bzCeF2g.png" /><figcaption>Fig16. Revoke all access</figcaption></figure><h3>Logs</h3><p>If you need provide logs for auditing purposes or such, you are able to search logs directly from Logs Explorer.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*LBlIsHEegHdJA5VS7lJF2Q.png" /><figcaption>Fig17. Logs explorer for PAM</figcaption></figure><p>To be able to find logs in Logs Explorer complete following steps:</p><ol><li>Go to Logs Explorer under the project where PAM has been configured</li><li>Use following query to list all logs related with PAM</li></ol><pre>resource.type=&quot;audited_resource&quot;<br>resource.labels.service=&quot;privilegedaccessmanager.googleapis.com&quot;</pre><p>3. Click “Run query”</p><h3>Limitations</h3><ol><li>One and mos important information about PAM is, that service is in Pre-GA, so don’t use this on production before GA release.</li><li>Basic roles aren’t supported.</li><li>Up to 20 roles to be granted on the organization, folder, or project</li><li>Up to 20 valid requesting principals ( particular principals or groups ). Email group participants within a group is no counted in this number.</li><li>You can add up to 20 approving identities per entitlement.</li></ol><p>Do not forget the 👏✌️❤️ if you like this content!</p><p>Also, I will be glad if you hit the follow button so you get notified of my new posts.</p><p>You can also follow me on <a href="https://www.linkedin.com/in/damian-sztankowski-95878b2a8/"><strong>LinkedIn</strong></a><strong>.</strong></p><p>You can join our <a href="https://www.linkedin.com/groups/9824115/"><strong>Google Cloud Community Poland</strong></a> LinkedIn group. It’s open!</p><p>Thank you!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1ed98d6098b3" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/setup-temporary-elevated-access-for-google-cloud-with-pam-1ed98d6098b3">Setup Temporary elevated access for Google Cloud with PAM</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Leveraging Gemini 1.5 API for Automated Test Case Generation Reverse Engineering]]></title>
            <link>https://medium.com/google-cloud/leveraging-gemini-1-5-api-for-automated-test-case-generation-reverse-engineering-2ee8789f01db?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/2ee8789f01db</guid>
            <category><![CDATA[llm]]></category>
            <category><![CDATA[gcp-app-dev]]></category>
            <category><![CDATA[gemini]]></category>
            <category><![CDATA[test-automation]]></category>
            <category><![CDATA[generative-ai]]></category>
            <dc:creator><![CDATA[Kanshi Tanaike]]></dc:creator>
            <pubDate>Thu, 09 May 2024 09:30:13 GMT</pubDate>
            <atom:updated>2024-05-09T09:30:13.152Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/0*fTtML3Sm1TuQNhQP.jpg" /></figure><h3>Abstract</h3><p>This report examines leveraging Gemini 1.5 API with Google Apps Script to automate sample input creation during script reverse engineering. Traditionally, this process is manual and time-consuming, especially for functions with numerous test cases. Gemini 1.5 API’s potential to streamline development by automating input generation is explored through applying reverse engineering techniques to Google Apps Script samples.</p><h3>Introduction</h3><p>With the release of Gemini 1.5 API, users gained the ability to process more complex data, opening doors for various application developments. This report explores the potential of using Gemini 1.5 API in conjunction with Google Apps Script to achieve reverse engineering for script development and improvement.</p><p>Traditionally, script development involves manually crafting sample input values. This process can be time-consuming, especially when creating functions or testing code retrieved from online resources like Stack Overflow. Each function might require numerous test cases, and manually generating these inputs can be a bottleneck.</p><p>Gemini 1.5 API offers a potential solution by automating sample input value creation. This could significantly reduce development time and effort. This report investigates this possibility by applying reverse engineering techniques to various Google Apps Script samples using Gemini 1.5 API.</p><p>Here, we will explore how Gemini 1.5 API can be used to automate sample input value generation for reverse engineering scripts written in Google Apps Script.</p><h3>Usage</h3><p>In order to test this script, please do the following flow.</p><h3>1. Create an API key</h3><p>Please access <a href="https://ai.google.dev/gemini-api/docs/api-key">https://ai.google.dev/gemini-api/docs/api-key</a> and create your API key. At that time, please enable Generative Language API at the API console. This API key is used for this sample script.</p><p>This official document can be also seen. <a href="https://ai.google.dev/">Ref</a>.</p><h3>2. Create a Google Apps Script project</h3><p>In this report, Google Apps Script is used. Of course, the method introducing this report can be also used in other languages.</p><p>Here, in order to test the following sample scripts, please create a standalone Google Apps Script project. Of course, this script can be also used with the container-bound script.</p><p>And, please open the script editor of the Google Apps Script project.</p><h3>3. Install Google Apps Script library</h3><p>In order to easily access Gemini API, I created a Google Apps Script library <a href="https://github.com/tanaikech/GeminiWithFiles">GeminiWithFiles</a>. In the following sample scripts, this library is used. So, please install it. You can see how to install it at <a href="https://github.com/tanaikech/GeminiWithFiles?tab=readme-ov-file#1-use-geminiwithfiles-as-a-google-apps-script-library">here</a>.</p><h3>4. Sample script 1</h3><p>The sample functions were selected from <a href="https://github.com/tanaikech/UtlApp">my repository</a>.</p><ul><li><a href="https://github.com/tanaikech/UtlApp?tab=readme-ov-file#transpose">transpose</a>: Transpose 2 dimensional array.</li><li><a href="https://github.com/tanaikech/UtlApp?tab=readme-ov-file#removeduplicatedvalues">removeDuplicatedValues</a>: Remove duplicated values from 1 dimensional array.</li><li><a href="https://github.com/tanaikech/UtlApp?tab=readme-ov-file#compilingnumbers">compilingNumbers</a>: Compiling Continuous Numbers using Google Apps Script.</li><li><a href="https://github.com/tanaikech/UtlApp?tab=readme-ov-file#unpivot">unpivot</a>: Converting 2-dimensional array as unpivot (reverse pivot).</li><li><a href="https://github.com/tanaikech/UtlApp?tab=readme-ov-file#expanda1notations">expandA1Notations</a>: This method is used for expanding A1Notations.</li></ul><p>The sample script demonstrating these functions is provided below. In this example, all functions can be executed in a single API call. When I ran this script, it returned a total of 2,880 tokens.</p><p>The sample first creates input values using Gemini. To test these values, the script then uses them with the function implemented in Google Apps Script. Finally, both the input and output values are printed.</p><p>JSON schema is employed here to generate content. This ensures the stable generation of complex JSON objects by Gemini. <a href="https://medium.com/google-cloud/taming-the-wild-output-effective-control-of-gemini-api-response-formats-with-response-mime-type-da273c08be85">Ref</a> As a result, I opted to use it in this instance.</p><pre>function myFunction() {<br><br>  const apiKey = &quot;###&quot;; // Please set your API key.<br><br>  const functionObj = {<br>    transpose: function transpose(array) {<br>      /**<br>       * ### Description<br>       * When the inputted array is 2 dimensional array, true is returned.<br>       *<br>       * @param {Array} array 2 dimensional array.<br>       * @return {Boolean} When the inputted array is 2 dimensional array, true is returned.<br>       */<br>      function is2DimensionalArray(array) {<br>        return array.every((r) =&gt; Array.isArray(r));<br>      }<br><br>      /**<br>       * ### Description<br>       * Transpose 2 dimensional array.<br>       *<br>       * @param {Array} array 2 dimensional array.<br>       * @param {Boolean} check Check whether the inputted array is 2 dimensional array. Default is true.<br>       * @return {Array} Transposed array.<br>       */<br>      function transpose(array, check = true) {<br>        if (check &amp;&amp; !is2DimensionalArray(array)) {<br>          throw new Error(&quot;Please use 2 dimensional array.&quot;);<br>        }<br>        return array[0].map((_, col) =&gt; array.map((row) =&gt; row[col] || null));<br>      }<br>      return transpose(array);<br>    },<br>    removeDuplicatedValues: function removeDuplicatedValues(array) {<br>      /**<br>       * ### Description<br>       * Remove duplicated values from 1 dimensional array.<br>       *<br>       * @param {Array} array 1 dimensional array.<br>       * @return {Object} Object including removeDuplicatedValues, duplicatedValues and numberOfDuplicate.<br>       */<br>      function removeDuplicatedValues(array) {<br>        if (!Array.isArray(array)) {<br>          throw new Error(&quot;Please use 1 dimensional array.&quot;);<br>        }<br>        const obj = array.reduce(<br>          (m, e) =&gt; m.set(e, m.has(e) ? m.get(e) + 1 : 1),<br>          new Map()<br>        );<br>        const e = [...obj.entries()];<br>        return {<br>          removeDuplicatedValues: [...obj.keys()],<br>          duplicatedValues: e.reduce((ar, [k, v]) =&gt; {<br>            if (v != 1) ar.push(k);<br>            return ar;<br>          }, []),<br>          numberOfDuplicate: Object.fromEntries(e),<br>        };<br>      }<br>      return removeDuplicatedValues(array);<br>    },<br>    compilingNumbers: function compilingNumbers(array) {<br>      /**<br>       * ### Description<br>       * Compiling Continuous Numbers using Google Apps Script.<br>       *<br>       * @param {Array} array Input array.<br>       * @return {Array} Array including object like [{&quot;start&quot;:1,&quot;end&quot;:1},{&quot;start&quot;:3,&quot;end&quot;:5},{&quot;start&quot;:7,&quot;end&quot;:7},{&quot;start&quot;:9,&quot;end&quot;:11},{&quot;start&quot;:13,&quot;end&quot;:13}].<br>       */<br>      function compilingNumbers(array) {<br>        if (!(Array.isArray(array) &amp;&amp; array.every((e) =&gt; !isNaN(e)))) {<br>          throw new Error(&quot;Please give an array including numbers.&quot;);<br>        }<br>        const { values } = [...new Set(array.sort((a, b) =&gt; a - b))].reduce(<br>          (o, e, i, a) =&gt; {<br>            if (<br>              o.temp.length == 0 ||<br>              (o.temp.length &gt; 0 &amp;&amp; e == o.temp[o.temp.length - 1] + 1)<br>            ) {<br>              o.temp.push(e);<br>            } else {<br>              if (o.temp.length &gt; 0) {<br>                o.values.push({<br>                  start: o.temp[0],<br>                  end: o.temp[o.temp.length - 1],<br>                });<br>              }<br>              o.temp = [e];<br>            }<br>            if (i == a.length - 1) {<br>              o.values.push(<br>                o.temp.length &gt; 1<br>                  ? { start: o.temp[0], end: o.temp[o.temp.length - 1] }<br>                  : { start: e, end: e }<br>              );<br>            }<br>            return o;<br>          },<br>          { temp: [], values: [] }<br>        );<br>        return values;<br>      }<br>      return compilingNumbers(array);<br>    },<br>    unpivot: function unpivot(values) {<br>      /**<br>       * ### Description<br>       * When the inputted array is 2 dimensional array, true is returned.<br>       *<br>       * @param {Array} array 2 dimensional array.<br>       * @return {Boolean} When the inputted array is 2 dimensional array, true is returned.<br>       */<br>      function is2DimensionalArray(array) {<br>        return array.every((r) =&gt; Array.isArray(r));<br>      }<br><br>      /**<br>       * ### Description<br>       * Converting 2-dimensional array as unpivot (reverse pivot).<br>       *<br>       * @param {Array} values 2 dimensional array.<br>       * @return {Array} 2 dimensional array converted as unpivot (reverse pivot).<br>       */<br>      function unpivot(values) {<br>        if (!Array.isArray(values) || !is2DimensionalArray(values)) {<br>          throw new Error(&quot;Please give an array of values.&quot;);<br>        }<br>        const [[, ...h], ...v] = values;<br>        return h.flatMap((hh, i) =&gt; v.map((t) =&gt; [hh, t[0], t[i + 1]]));<br>      }<br>      return unpivot(values);<br>    },<br>    expandA1Notations: function expandA1Notations(a1Notations) {<br>      /**<br>       * ### Description<br>       * Converting colum letter to column index. Start of column index is 0.<br>       * @param {String} letter Column letter.<br>       * @return {Number} Column index.<br>       */<br>      function columnLetterToIndex(letter = null) {<br>        if (letter === null || typeof letter != &quot;string&quot;) {<br>          throw new Error(&quot;Please give the column letter as a string.&quot;);<br>        }<br>        letter = letter.toUpperCase();<br>        return [...letter].reduce(<br>          (c, e, i, a) =&gt;<br>            (c += (e.charCodeAt(0) - 64) * Math.pow(26, a.length - i - 1)),<br>          -1<br>        );<br>      }<br><br>      /**<br>       * ### Description<br>       * Converting colum index to column letter. Start of column index is 0.<br>       * Ref: https://stackoverflow.com/a/53678158/7108653<br>       * @param {Number} index Column index.<br>       * @return {String} Column letter.<br>       */<br>      function columnIndexToLetter(index = null) {<br>        if (index === null || isNaN(index)) {<br>          throw new Error(<br>            &quot;Please give the column indexr as a number. In this case, 1st number is 0.&quot;<br>          );<br>        }<br>        return (a = Math.floor(index / 26)) &gt;= 0<br>          ? columnIndexToLetter(a - 1) + String.fromCharCode(65 + (index % 26))<br>          : &quot;&quot;;<br>      }<br><br>      /**<br>       * ### Description<br>       * This method is used for expanding A1Notations.<br>       * @param {Array} a1Notations Array including A1Notations.<br>       * @return {Array} Array including the expanded A1Notations.<br>       */<br>      function expandA1Notations(a1Notations, maxRow = &quot;10&quot;, maxColumn = &quot;Z&quot;) {<br>        if (!Array.isArray(a1Notations) || a1Notations.length == 0) {<br>          throw new Error(&quot;Please give a1Notations (Array).&quot;);<br>        }<br>        const reg1 = new RegExp(&quot;^([A-Z]+)([0-9]+)$&quot;);<br>        const reg2 = new RegExp(&quot;^([A-Z]+)$&quot;);<br>        const reg3 = new RegExp(&quot;^([0-9]+)$&quot;);<br>        return a1Notations.map((e) =&gt; {<br>          const a1 = e.split(&quot;!&quot;);<br>          const r = a1.length &gt; 1 ? a1[1] : a1[0];<br>          const [r1, r2] = r.split(&quot;:&quot;);<br>          if (!r2) return [r1];<br>          let rr;<br>          if (reg1.test(r1) &amp;&amp; reg1.test(r2)) {<br>            rr = [r1.toUpperCase().match(reg1), r2.toUpperCase().match(reg1)];<br>          } else if (reg2.test(r1) &amp;&amp; reg2.test(r2)) {<br>            rr = [<br>              [null, r1, 1],<br>              [null, r2, maxRow],<br>            ];<br>          } else if (reg1.test(r1) &amp;&amp; reg2.test(r2)) {<br>            rr = [r1.toUpperCase().match(reg1), [null, r2, maxRow]];<br>          } else if (reg2.test(r1) &amp;&amp; reg1.test(r2)) {<br>            rr = [[null, r1, maxRow], r2.toUpperCase().match(reg1)];<br>          } else if (reg3.test(r1) &amp;&amp; reg3.test(r2)) {<br>            rr =<br>              Number(r1) &gt; Number(r2)<br>                ? [<br>                    [null, &quot;A&quot;, r2],<br>                    [null, maxColumn, r1],<br>                  ]<br>                : [<br>                    [null, &quot;A&quot;, r1],<br>                    [null, maxColumn, r2],<br>                  ];<br>          } else if (reg1.test(r1) &amp;&amp; reg3.test(r2)) {<br>            rr = [r1.toUpperCase().match(reg1), [null, maxColumn, r2]];<br>          } else if (reg3.test(r1) &amp;&amp; reg1.test(r2)) {<br>            let temp = r2.toUpperCase().match(reg1);<br>            rr =<br>              Number(temp[2]) &gt; Number(r1)<br>                ? [<br>                    [null, temp[1], r1],<br>                    [null, maxColumn, temp[2]],<br>                  ]<br>                : [temp, [null, maxColumn, r1]];<br>          } else {<br>            throw new Error(&quot;Wrong a1Notation: &quot; + r);<br>          }<br>          const obj = {<br>            startRowIndex: Number(rr[0][2]),<br>            endRowIndex:<br>              rr.length == 1 ? Number(rr[0][2]) + 1 : Number(rr[1][2]) + 1,<br>            startColumnIndex: columnLetterToIndex(rr[0][1]),<br>            endColumnIndex:<br>              rr.length == 1<br>                ? columnLetterToIndex(rr[0][1]) + 1<br>                : columnLetterToIndex(rr[1][1]) + 1,<br>          };<br>          let temp = [];<br>          for (let i = obj.startRowIndex; i &lt; obj.endRowIndex; i++) {<br>            for (let j = obj.startColumnIndex; j &lt; obj.endColumnIndex; j++) {<br>              temp.push(columnIndexToLetter(j) + i);<br>            }<br>          }<br>          return temp;<br>        });<br>      }<br>      return expandA1Notations(a1Notations);<br>    },<br>  };<br><br>  const g = GeminiWithFiles.geminiWithFiles({<br>    apiKey,<br>    response_mime_type: &quot;application/json&quot;,<br>    doCountToken: true,<br>  });<br><br>  const functions = Object.entries(functionObj)<br>    .map(<br>      ([k, v]) =&gt;<br>        `&lt;FunctionName&gt;${k}&lt;/FunctionName&gt;&lt;Function&gt;${v.toString()}&lt;/Function&gt;`<br>    )<br>    .join(&quot;&quot;);<br>  const jsonSchema = {<br>    title: &quot;5 input values for giving each function&quot;,<br>    description: `Proposal 5 input values for giving each function. ${functions} Don&#39;t propose &quot;empty&quot;, &quot;null&quot;, &quot;undefined&quot; as values.`,<br>    type: &quot;array&quot;,<br>    items: {<br>      type: &quot;object&quot;,<br>      properties: {<br>        functionName: { description: &quot;Function name&quot;, type: &quot;string&quot; },<br>        inputValues: {<br>          description: `Proposed 5 input values. Don&#39;t propose &quot;empty&quot;, &quot;null&quot;, &quot;undefined&quot; as values.`,<br>          type: &quot;array&quot;,<br>          items: {<br>            description: &quot;Proposed input value&quot;,<br>            type: &quot;array|object|string|number&quot;,<br>          },<br>        },<br>      },<br>      additionalProperties: false,<br>    },<br>  };<br>  let res = g.generateContent({ jsonSchema });<br>  if (typeof res == &quot;string&quot;) {<br>    try {<br>      res = JSON.parse(res);<br>    } catch ({ stack }) {<br>      console.error(stack);<br>      return;<br>    }<br>  }<br>  const result = res.reduce((o, { functionName, inputValues }) =&gt; {<br>    try {<br>      o[functionName] = [];<br>      inputValues.forEach((input) =&gt; {<br>        const output = functionObj[functionName](input);<br>        o[functionName].push({ input, output });<br>      });<br>    } catch ({ stack }) {<br>      console.log(stack);<br>    }<br>    return o;<br>  }, {});<br>  console.log(JSON.stringify(result));<br>}</pre><p>When this script is run, the following result is obtained. You can see that valid input and output values are created.</p><pre>{<br>  &quot;transpose&quot;: [<br>    { &quot;input&quot;: [[1, 2], [3, 4]], &quot;output&quot;: [[1, 3], [2, 4]] },<br>    { &quot;input&quot;: [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;]], &quot;output&quot;: [[&quot;a&quot;, &quot;c&quot;], [&quot;b&quot;, &quot;d&quot;]] },<br>    { &quot;input&quot;: [[&quot;a1&quot;, &quot;b1&quot;], [&quot;c1&quot;, &quot;d1&quot;], [&quot;e1&quot;, &quot;f1&quot;]], &quot;output&quot;: [[&quot;a1&quot;, &quot;c1&quot;, &quot;e1&quot;], [&quot;b1&quot;, &quot;d1&quot;, &quot;f1&quot;]] },<br>    { &quot;input&quot;: [[true, false], [false, true]], &quot;output&quot;: [[true, null], [null, true]] },<br>    { &quot;input&quot;: [[1, &quot;a&quot;], [&quot;c&quot;, true]], &quot;output&quot;: [[1, &quot;c&quot;], [&quot;a&quot;, true]] }<br>  ],<br><br>  &quot;removeDuplicatedValues&quot;: [<br>    { &quot;input&quot;: [1, 2, 3, 4, 5], &quot;output&quot;: { &quot;removeDuplicatedValues&quot;: [1, 2, 3, 4, 5], &quot;duplicatedValues&quot;: [], &quot;numberOfDuplicate&quot;: { &quot;1&quot;: 1, &quot;2&quot;: 1, &quot;3&quot;: 1, &quot;4&quot;: 1, &quot;5&quot;: 1 } } },<br>    { &quot;input&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;], &quot;output&quot;: { &quot;removeDuplicatedValues&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;], &quot;duplicatedValues&quot;: [], &quot;numberOfDuplicate&quot;: { &quot;a&quot;: 1, &quot;b&quot;: 1, &quot;c&quot;: 1, &quot;d&quot;: 1, &quot;e&quot;: 1 } } },<br>    { &quot;input&quot;: [1, 2, 1, 3, 2, 4, 3, 5, 4], &quot;output&quot;: { &quot;removeDuplicatedValues&quot;: [1, 2, 3, 4, 5], &quot;duplicatedValues&quot;: [1, 2, 3, 4], &quot;numberOfDuplicate&quot;: { &quot;1&quot;: 2, &quot;2&quot;: 2, &quot;3&quot;: 2, &quot;4&quot;: 2, &quot;5&quot;: 1 } } },<br>    { &quot;input&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;b&quot;, &quot;d&quot;, &quot;c&quot;, &quot;e&quot;, &quot;d&quot;], &quot;output&quot;: { &quot;removeDuplicatedValues&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;], &quot;duplicatedValues&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;], &quot;numberOfDuplicate&quot;: { &quot;a&quot;: 2, &quot;b&quot;: 2, &quot;c&quot;: 2, &quot;d&quot;: 2, &quot;e&quot;: 1 } } },<br>    { &quot;input&quot;: [1, &quot;a&quot;, 2, &quot;b&quot;, 1, &quot;c&quot;, 2, &quot;d&quot;, 1, &quot;e&quot;], &quot;output&quot;: { &quot;removeDuplicatedValues&quot;: [1, &quot;a&quot;, 2, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;], &quot;duplicatedValues&quot;: [1, 2], &quot;numberOfDuplicate&quot;: { &quot;1&quot;: 3, &quot;2&quot;: 2, &quot;a&quot;: 1, &quot;b&quot;: 1, &quot;c&quot;: 1, &quot;d&quot;: 1, &quot;e&quot;: 1 } } }<br>  ],<br><br>  &quot;compilingNumbers&quot;: [<br>    { &quot;input&quot;: [1, 2, 3, 4, 5], &quot;output&quot;: [{ &quot;start&quot;: 1, &quot;end&quot;: 5 }] },<br>    { &quot;input&quot;: [1, 3, 5, 7, 9, 11, 13], &quot;output&quot;: [{ &quot;start&quot;: 1, &quot;end&quot;: 1 }, { &quot;start&quot;: 3, &quot;end&quot;: 3 }, { &quot;start&quot;: 5, &quot;end&quot;: 5 }, { &quot;start&quot;: 7, &quot;end&quot;: 7 }, { &quot;start&quot;: 9, &quot;end&quot;: 9 }, { &quot;start&quot;: 11, &quot;end&quot;: 11 }, { &quot;start&quot;: 13, &quot;end&quot;: 13 }] },<br>    { &quot;input&quot;: [1, 3, 5, 7, 8, 10, 12, 13], &quot;output&quot;: [{ &quot;start&quot;: 1, &quot;end&quot;: 1 }, { &quot;start&quot;: 3, &quot;end&quot;: 3 }, { &quot;start&quot;: 5, &quot;end&quot;: 5 }, { &quot;start&quot;: 7, &quot;end&quot;: 8 }, { &quot;start&quot;: 10, &quot;end&quot;: 10 }, { &quot;start&quot;: 12, &quot;end&quot;: 13 }] },<br>    { &quot;input&quot;: [1, 2, 4, 5, 7, 8, 10, 11, 13, 14], &quot;output&quot;: [{ &quot;start&quot;: 1, &quot;end&quot;: 2 }, { &quot;start&quot;: 4, &quot;end&quot;: 5 }, { &quot;start&quot;: 7, &quot;end&quot;: 8 }, { &quot;start&quot;: 10, &quot;end&quot;: 11 }, { &quot;start&quot;: 13, &quot;end&quot;: 14 }] },<br>    { &quot;input&quot;: [1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15], &quot;output&quot;: [{ &quot;start&quot;: 1, &quot;end&quot;: 3 }, { &quot;start&quot;: 5, &quot;end&quot;: 6 }, { &quot;start&quot;: 8, &quot;end&quot;: 9 }, { &quot;start&quot;: 11, &quot;end&quot;: 12 }, { &quot;start&quot;: 14, &quot;end&quot;: 15 }] }<br>  ],<br><br>  &quot;unpivot&quot;: [<br>    { &quot;input&quot;: [[&quot;name&quot;, &quot;score1&quot;, &quot;score2&quot;], [&quot;sample1&quot;, 100, 80], [&quot;sample2&quot;, 90, 70]], &quot;output&quot;: [[&quot;score1&quot;, &quot;sample1&quot;, 100], [&quot;score1&quot;, &quot;sample2&quot;, 90], [&quot;score2&quot;, &quot;sample1&quot;, 80], [&quot;score2&quot;, &quot;sample2&quot;, 70]] },<br>    { &quot;input&quot;: [[&quot;name&quot;, &quot;score1&quot;, &quot;score2&quot;, &quot;score3&quot;], [&quot;sample1&quot;, 100, 80, 70], [&quot;sample2&quot;, 90, 70, 80]], &quot;output&quot;: [[&quot;score1&quot;, &quot;sample1&quot;, 100], [&quot;score1&quot;, &quot;sample2&quot;, 90], [&quot;score2&quot;, &quot;sample1&quot;, 80], [&quot;score2&quot;, &quot;sample2&quot;, 70], [&quot;score3&quot;, &quot;sample1&quot;, 70], [&quot;score3&quot;, &quot;sample2&quot;, 80]] },<br>    { &quot;input&quot;: [[&quot;id&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;], [&quot;a&quot;, 1, 2, 3], [&quot;b&quot;, 4, 5, 6]], &quot;output&quot;: [[&quot;x&quot;, &quot;a&quot;, 1], [&quot;x&quot;, &quot;b&quot;, 4], [&quot;y&quot;, &quot;a&quot;, 2], [&quot;y&quot;, &quot;b&quot;, 5], [&quot;z&quot;, &quot;a&quot;, 3], [&quot;z&quot;, &quot;b&quot;, 6]] },<br>    { &quot;input&quot;: [[&quot;id&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;xx&quot;, &quot;yy&quot;, &quot;zz&quot;], [&quot;a&quot;, 1, 2, 3, 10, 20, 30], [&quot;b&quot;, 4, 5, 6, 40, 50, 60]], &quot;output&quot;: [[&quot;x&quot;, &quot;a&quot;, 1], [&quot;x&quot;, &quot;b&quot;, 4], [&quot;y&quot;, &quot;a&quot;, 2], [&quot;y&quot;, &quot;b&quot;, 5], [&quot;z&quot;, &quot;a&quot;, 3], [&quot;z&quot;, &quot;b&quot;, 6], [&quot;xx&quot;, &quot;a&quot;, 10], [&quot;xx&quot;, &quot;b&quot;, 40], [&quot;yy&quot;, &quot;a&quot;, 20], [&quot;yy&quot;, &quot;b&quot;, 50], [&quot;zz&quot;, &quot;a&quot;, 30], [&quot;zz&quot;, &quot;b&quot;, 60]] },<br>    { &quot;input&quot;: [[&quot;Fruit&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;], [&quot;apple&quot;, 100, 120, 150], [&quot;orange&quot;, 80, 90, 100]], &quot;output&quot;: [[&quot;2021&quot;, &quot;apple&quot;, 100], [&quot;2021&quot;, &quot;orange&quot;, 80], [&quot;2022&quot;, &quot;apple&quot;, 120], [&quot;2022&quot;, &quot;orange&quot;, 90], [&quot;2023&quot;, &quot;apple&quot;, 150], [&quot;2023&quot;, &quot;orange&quot;, 100]] }<br>  ],<br><br>  &quot;expandA1Notations&quot;: [<br>    { &quot;input&quot;: [&quot;A1:B5&quot;, &quot;C3:D7&quot;, &quot;E2:F10&quot;], &quot;output&quot;: [[&quot;A1&quot;, &quot;B1&quot;, &quot;A2&quot;, &quot;B2&quot;, &quot;A3&quot;, &quot;B3&quot;, &quot;A4&quot;, &quot;B4&quot;, &quot;A5&quot;, &quot;B5&quot;], [&quot;C3&quot;, &quot;D3&quot;, &quot;C4&quot;, &quot;D4&quot;, &quot;C5&quot;, &quot;D5&quot;, &quot;C6&quot;, &quot;D6&quot;, &quot;C7&quot;, &quot;D7&quot;], [&quot;E2&quot;, &quot;F2&quot;, &quot;E3&quot;, &quot;F3&quot;, &quot;E4&quot;, &quot;F4&quot;, &quot;E5&quot;, &quot;F5&quot;, &quot;E6&quot;, &quot;F6&quot;, &quot;E7&quot;, &quot;F7&quot;, &quot;E8&quot;, &quot;F8&quot;, &quot;E9&quot;, &quot;F9&quot;, &quot;E10&quot;, &quot;F10&quot;]] },<br>    { &quot;input&quot;: [&quot;A:B&quot;, &quot;C:D&quot;, &quot;E:F&quot;], &quot;output&quot;: [[&quot;A1&quot;, &quot;B1&quot;, &quot;A2&quot;, &quot;B2&quot;, &quot;A3&quot;, &quot;B3&quot;, &quot;A4&quot;, &quot;B4&quot;, &quot;A5&quot;, &quot;B5&quot;, &quot;A6&quot;, &quot;B6&quot;, &quot;A7&quot;, &quot;B7&quot;, &quot;A8&quot;, &quot;B8&quot;, &quot;A9&quot;, &quot;B9&quot;, &quot;A10&quot;, &quot;B10&quot;], [&quot;C1&quot;, &quot;D1&quot;, &quot;C2&quot;, &quot;D2&quot;, &quot;C3&quot;, &quot;D3&quot;, &quot;C4&quot;, &quot;D4&quot;, &quot;C5&quot;, &quot;D5&quot;, &quot;C6&quot;, &quot;D6&quot;, &quot;C7&quot;, &quot;D7&quot;, &quot;C8&quot;, &quot;D8&quot;, &quot;C9&quot;, &quot;D9&quot;, &quot;C10&quot;, &quot;D10&quot;], [&quot;E1&quot;, &quot;F1&quot;, &quot;E2&quot;, &quot;F2&quot;, &quot;E3&quot;, &quot;F3&quot;, &quot;E4&quot;, &quot;F4&quot;, &quot;E5&quot;, &quot;F5&quot;, &quot;E6&quot;, &quot;F6&quot;, &quot;E7&quot;, &quot;F7&quot;, &quot;E8&quot;, &quot;F8&quot;, &quot;E9&quot;, &quot;F9&quot;, &quot;E10&quot;, &quot;F10&quot;]] },<br>    { &quot;input&quot;: [&quot;A1:C5&quot;], &quot;output&quot;: [[&quot;A1&quot;, &quot;B1&quot;, &quot;C1&quot;, &quot;A2&quot;, &quot;B2&quot;, &quot;C2&quot;, &quot;A3&quot;, &quot;B3&quot;, &quot;C3&quot;, &quot;A4&quot;, &quot;B4&quot;, &quot;C4&quot;, &quot;A5&quot;, &quot;B5&quot;, &quot;C5&quot;]] },<br>    { &quot;input&quot;: [&quot;A:C&quot;], &quot;output&quot;: [[&quot;A1&quot;, &quot;B1&quot;, &quot;C1&quot;, &quot;A2&quot;, &quot;B2&quot;, &quot;C2&quot;, &quot;A3&quot;, &quot;B3&quot;, &quot;C3&quot;, &quot;A4&quot;, &quot;B4&quot;, &quot;C4&quot;, &quot;A5&quot;, &quot;B5&quot;, &quot;C5&quot;, &quot;A6&quot;, &quot;B6&quot;, &quot;C6&quot;, &quot;A7&quot;, &quot;B7&quot;, &quot;C7&quot;, &quot;A8&quot;, &quot;B8&quot;, &quot;C8&quot;, &quot;A9&quot;, &quot;B9&quot;, &quot;C9&quot;, &quot;A10&quot;, &quot;B10&quot;, &quot;C10&quot;]] },<br>    { &quot;input&quot;: [&quot;1:5&quot;, &quot;3:7&quot;, &quot;2:10&quot;], &quot;output&quot;: [[&quot;A1&quot;, &quot;B1&quot;, &quot;C1&quot;, &quot;D1&quot;, &quot;E1&quot;, &quot;F1&quot;, &quot;G1&quot;, &quot;H1&quot;, &quot;I1&quot;, &quot;J1&quot;, &quot;K1&quot;, &quot;L1&quot;, &quot;M1&quot;, &quot;N1&quot;, &quot;O1&quot;, &quot;P1&quot;, &quot;Q1&quot;, &quot;R1&quot;, &quot;S1&quot;, &quot;T1&quot;, &quot;U1&quot;, &quot;V1&quot;, &quot;W1&quot;, &quot;X1&quot;, &quot;Y1&quot;, &quot;Z1&quot;, &quot;A2&quot;, &quot;B2&quot;, &quot;C2&quot;, &quot;D2&quot;, &quot;E2&quot;, &quot;F2&quot;, &quot;G2&quot;, &quot;H2&quot;, &quot;I2&quot;, &quot;J2&quot;, &quot;K2&quot;, &quot;L2&quot;, &quot;M2&quot;, &quot;N2&quot;, &quot;O2&quot;, &quot;P2&quot;, &quot;Q2&quot;, &quot;R2&quot;, &quot;S2&quot;, &quot;T2&quot;, &quot;U2&quot;, &quot;V2&quot;, &quot;W2&quot;, &quot;X2&quot;, &quot;Y2&quot;, &quot;Z2&quot;, &quot;A3&quot;, &quot;B3&quot;, &quot;C3&quot;, &quot;D3&quot;, &quot;E3&quot;, &quot;F3&quot;, &quot;G3&quot;, &quot;H3&quot;, &quot;I3&quot;, &quot;J3&quot;, &quot;K3&quot;, &quot;L3&quot;, &quot;M3&quot;, &quot;N3&quot;, &quot;O3&quot;, &quot;P3&quot;, &quot;Q3&quot;, &quot;R3&quot;, &quot;S3&quot;, &quot;T3&quot;, &quot;U3&quot;, &quot;V3&quot;, &quot;W3&quot;, &quot;X3&quot;, &quot;Y3&quot;, &quot;Z3&quot;, &quot;A4&quot;, &quot;B4&quot;, &quot;C4&quot;, &quot;D4&quot;, &quot;E4&quot;, &quot;F4&quot;, &quot;G4&quot;, &quot;H4&quot;, &quot;I4&quot;, &quot;J4&quot;, &quot;K4&quot;, &quot;L4&quot;, &quot;M4&quot;, &quot;N4&quot;, &quot;O4&quot;, &quot;P4&quot;, &quot;Q4&quot;, &quot;R4&quot;, &quot;S4&quot;, &quot;T4&quot;, &quot;U4&quot;, &quot;V4&quot;, &quot;W4&quot;, &quot;X4&quot;, &quot;Y4&quot;, &quot;Z4&quot;, &quot;A5&quot;, &quot;B5&quot;, &quot;C5&quot;, &quot;D5&quot;, &quot;E5&quot;, &quot;F5&quot;, &quot;G5&quot;, &quot;H5&quot;, &quot;I5&quot;, &quot;J5&quot;, &quot;K5&quot;, &quot;L5&quot;, &quot;M5&quot;, &quot;N5&quot;, &quot;O5&quot;, &quot;P5&quot;, &quot;Q5&quot;, &quot;R5&quot;, &quot;S5&quot;, &quot;T5&quot;, &quot;U5&quot;, &quot;V5&quot;, &quot;W5&quot;, &quot;X5&quot;, &quot;Y5&quot;, &quot;Z5&quot;], [&quot;A3&quot;, &quot;B3&quot;, &quot;C3&quot;, &quot;D3&quot;, &quot;E3&quot;, &quot;F3&quot;, &quot;G3&quot;, &quot;H3&quot;, &quot;I3&quot;, &quot;J3&quot;, &quot;K3&quot;, &quot;L3&quot;, &quot;M3&quot;, &quot;N3&quot;, &quot;O3&quot;, &quot;P3&quot;, &quot;Q3&quot;, &quot;R3&quot;, &quot;S3&quot;, &quot;T3&quot;, &quot;U3&quot;, &quot;V3&quot;, &quot;W3&quot;, &quot;X3&quot;, &quot;Y3&quot;, &quot;Z3&quot;, &quot;A4&quot;, &quot;B4&quot;, &quot;C4&quot;, &quot;D4&quot;, &quot;E4&quot;, &quot;F4&quot;, &quot;G4&quot;, &quot;H4&quot;, &quot;I4&quot;, &quot;J4&quot;, &quot;K4&quot;, &quot;L4&quot;, &quot;M4&quot;, &quot;N4&quot;, &quot;O4&quot;, &quot;P4&quot;, &quot;Q4&quot;, &quot;R4&quot;, &quot;S4&quot;, &quot;T4&quot;, &quot;U4&quot;, &quot;V4&quot;, &quot;W4&quot;, &quot;X4&quot;, &quot;Y4&quot;, &quot;Z4&quot;, &quot;A5&quot;, &quot;B5&quot;, &quot;C5&quot;, &quot;D5&quot;, &quot;E5&quot;, &quot;F5&quot;, &quot;G5&quot;, &quot;H5&quot;, &quot;I5&quot;, &quot;J5&quot;, &quot;K5&quot;, &quot;L5&quot;, &quot;M5&quot;, &quot;N5&quot;, &quot;O5&quot;, &quot;P5&quot;, &quot;Q5&quot;, &quot;R5&quot;, &quot;S5&quot;, &quot;T5&quot;, &quot;U5&quot;, &quot;V5&quot;, &quot;W5&quot;, &quot;X5&quot;, &quot;Y5&quot;, &quot;Z5&quot;, &quot;A6&quot;, &quot;B6&quot;, &quot;C6&quot;, &quot;D6&quot;, &quot;E6&quot;, &quot;F6&quot;, &quot;G6&quot;, &quot;H6&quot;, &quot;I6&quot;, &quot;J6&quot;, &quot;K6&quot;, &quot;L6&quot;, &quot;M6&quot;, &quot;N6&quot;, &quot;O6&quot;, &quot;P6&quot;, &quot;Q6&quot;, &quot;R6&quot;, &quot;S6&quot;, &quot;T6&quot;, &quot;U6&quot;, &quot;V6&quot;, &quot;W6&quot;, &quot;X6&quot;, &quot;Y6&quot;, &quot;Z6&quot;, &quot;A7&quot;, &quot;B7&quot;, &quot;C7&quot;, &quot;D7&quot;, &quot;E7&quot;, &quot;F7&quot;, &quot;G7&quot;, &quot;H7&quot;, &quot;I7&quot;, &quot;J7&quot;, &quot;K7&quot;, &quot;L7&quot;, &quot;M7&quot;, &quot;N7&quot;, &quot;O7&quot;, &quot;P7&quot;, &quot;Q7&quot;, &quot;R7&quot;, &quot;S7&quot;, &quot;T7&quot;, &quot;U7&quot;, &quot;V7&quot;, &quot;W7&quot;, &quot;X7&quot;, &quot;Y7&quot;, &quot;Z7&quot;], [&quot;A2&quot;, &quot;B2&quot;, &quot;C2&quot;, &quot;D2&quot;, &quot;E2&quot;, &quot;F2&quot;, &quot;G2&quot;, &quot;H2&quot;, &quot;I2&quot;, &quot;J2&quot;, &quot;K2&quot;, &quot;L2&quot;, &quot;M2&quot;, &quot;N2&quot;, &quot;O2&quot;, &quot;P2&quot;, &quot;Q2&quot;, &quot;R2&quot;, &quot;S2&quot;, &quot;T2&quot;, &quot;U2&quot;, &quot;V2&quot;, &quot;W2&quot;, &quot;X2&quot;, &quot;Y2&quot;, &quot;Z2&quot;, &quot;A3&quot;, &quot;B3&quot;, &quot;C3&quot;, &quot;D3&quot;, &quot;E3&quot;, &quot;F3&quot;, &quot;G3&quot;, &quot;H3&quot;, &quot;I3&quot;, &quot;J3&quot;, &quot;K3&quot;, &quot;L3&quot;, &quot;M3&quot;, &quot;N3&quot;, &quot;O3&quot;, &quot;P3&quot;, &quot;Q3&quot;, &quot;R3&quot;, &quot;S3&quot;, &quot;T3&quot;, &quot;U3&quot;, &quot;V3&quot;, &quot;W3&quot;, &quot;X3&quot;, &quot;Y3&quot;, &quot;Z3&quot;, &quot;A4&quot;, &quot;B4&quot;, &quot;C4&quot;, &quot;D4&quot;, &quot;E4&quot;, &quot;F4&quot;, &quot;G4&quot;, &quot;H4&quot;, &quot;I4&quot;, &quot;J4&quot;, &quot;K4&quot;, &quot;L4&quot;, &quot;M4&quot;, &quot;N4&quot;, &quot;O4&quot;, &quot;P4&quot;, &quot;Q4&quot;, &quot;R4&quot;, &quot;S4&quot;, &quot;T4&quot;, &quot;U4&quot;, &quot;V4&quot;, &quot;W4&quot;, &quot;X4&quot;, &quot;Y4&quot;, &quot;Z4&quot;, &quot;A5&quot;, &quot;B5&quot;, &quot;C5&quot;, &quot;D5&quot;, &quot;E5&quot;, &quot;F5&quot;, &quot;G5&quot;, &quot;H5&quot;, &quot;I5&quot;, &quot;J5&quot;, &quot;K5&quot;, &quot;L5&quot;, &quot;M5&quot;, &quot;N5&quot;, &quot;O5&quot;, &quot;P5&quot;, &quot;Q5&quot;, &quot;R5&quot;, &quot;S5&quot;, &quot;T5&quot;, &quot;U5&quot;, &quot;V5&quot;, &quot;W5&quot;, &quot;X5&quot;, &quot;Y5&quot;, &quot;Z5&quot;, &quot;A6&quot;, &quot;B6&quot;, &quot;C6&quot;, &quot;D6&quot;, &quot;E6&quot;, &quot;F6&quot;, &quot;G6&quot;, &quot;H6&quot;, &quot;I6&quot;, &quot;J6&quot;, &quot;K6&quot;, &quot;L6&quot;, &quot;M6&quot;, &quot;N6&quot;, &quot;O6&quot;, &quot;P6&quot;, &quot;Q6&quot;, &quot;R6&quot;, &quot;S6&quot;, &quot;T6&quot;, &quot;U6&quot;, &quot;V6&quot;, &quot;W6&quot;, &quot;X6&quot;, &quot;Y6&quot;, &quot;Z6&quot;, &quot;A7&quot;, &quot;B7&quot;, &quot;C7&quot;, &quot;D7&quot;, &quot;E7&quot;, &quot;F7&quot;, &quot;G7&quot;, &quot;H7&quot;, &quot;I7&quot;, &quot;J7&quot;, &quot;K7&quot;, &quot;L7&quot;, &quot;M7&quot;, &quot;N7&quot;, &quot;O7&quot;, &quot;P7&quot;, &quot;Q7&quot;, &quot;R7&quot;, &quot;S7&quot;, &quot;T7&quot;, &quot;U7&quot;, &quot;V7&quot;, &quot;W7&quot;, &quot;X7&quot;, &quot;Y7&quot;, &quot;Z7&quot;, &quot;A8&quot;, &quot;B8&quot;, &quot;C8&quot;, &quot;D8&quot;, &quot;E8&quot;, &quot;F8&quot;, &quot;G8&quot;, &quot;H8&quot;, &quot;I8&quot;, &quot;J8&quot;, &quot;K8&quot;, &quot;L8&quot;, &quot;M8&quot;, &quot;N8&quot;, &quot;O8&quot;, &quot;P8&quot;, &quot;Q8&quot;, &quot;R8&quot;, &quot;S8&quot;, &quot;T8&quot;, &quot;U8&quot;, &quot;V8&quot;, &quot;W8&quot;, &quot;X8&quot;, &quot;Y8&quot;, &quot;Z8&quot;, &quot;A9&quot;, &quot;B9&quot;, &quot;C9&quot;, &quot;D9&quot;, &quot;E9&quot;, &quot;F9&quot;, &quot;G9&quot;, &quot;H9&quot;, &quot;I9&quot;, &quot;J9&quot;, &quot;K9&quot;, &quot;L9&quot;, &quot;M9&quot;, &quot;N9&quot;, &quot;O9&quot;, &quot;P9&quot;, &quot;Q9&quot;, &quot;R9&quot;, &quot;S9&quot;, &quot;T9&quot;, &quot;U9&quot;, &quot;V9&quot;, &quot;W9&quot;, &quot;X9&quot;, &quot;Y9&quot;, &quot;Z9&quot;, &quot;A10&quot;, &quot;B10&quot;, &quot;C10&quot;, &quot;D10&quot;, &quot;E10&quot;, &quot;F10&quot;, &quot;G10&quot;, &quot;H10&quot;, &quot;I10&quot;, &quot;J10&quot;, &quot;K10&quot;, &quot;L10&quot;, &quot;M10&quot;, &quot;N10&quot;, &quot;O10&quot;, &quot;P10&quot;, &quot;Q10&quot;, &quot;R10&quot;, &quot;S10&quot;, &quot;T10&quot;, &quot;U10&quot;, &quot;V10&quot;, &quot;W10&quot;, &quot;X10&quot;, &quot;Y10&quot;, &quot;Z10&quot;]] }<br>  ]<br>}</pre><h3>5. Sample script 2</h3><p>Each function of the above sample script uses only one argument. When multiple arguments are used, the script is as follows. The sample function is as follows.</p><ul><li><a href="https://github.com/tanaikech/UtlApp?tab=readme-ov-file#splitarray">splitArray</a>: Split array every n length.</li></ul><pre>function myFunction() {<br><br>  const apiKey = &quot;###&quot;; // Please set your API key.<br><br>  const functionObj = {<br>    splitArray: function splitArray(array, size) {<br>      /**<br>       * ### Description<br>       * Split array every n length.<br>       *<br>       * @param {Array} array 2 dimensional array.<br>       * @param {Boolean} check Check whether the inputted array is 2 dimensional array. Default is true.<br>       * @return {Array} Transposed array.<br>       */<br>      function splitArray(array, size) {<br>        if (!array || !size || !Array.isArray(array)) {<br>          throw new Error(&quot;Please give an array and split size.&quot;);<br>        }<br>        return [...Array(Math.ceil(array.length / size))].map((_) =&gt;<br>          array.splice(0, size)<br>        );<br>      }<br>      return splitArray(array, size);<br>    },<br>  };<br><br>  const g = GeminiWithFiles.geminiWithFiles({<br>    apiKey,<br>    response_mime_type: &quot;application/json&quot;,<br>    doCountToken: true,<br>  });<br><br>  const functions = Object.entries(functionObj)<br>    .map(<br>      ([k, v]) =&gt;<br>        `&lt;FunctionName&gt;${k}&lt;/FunctionName&gt;&lt;Function&gt;${v.toString()}&lt;/Function&gt;`<br>    )<br>    .join(&quot;&quot;);<br>  const jsonSchema = {<br>    title: &quot;5 input values for giving each function&quot;,<br>    description: `Proposal 5 input values for giving each function. ${functions} Don&#39;t propose &quot;empty&quot;, &quot;null&quot;, &quot;undefined&quot; as values.`,<br>    type: &quot;array&quot;,<br>    items: {<br>      type: &quot;object&quot;,<br>      properties: {<br>        functionName: { description: &quot;Function name&quot;, type: &quot;string&quot; },<br>        inputValues: {<br>          description: `Proposed 5 input values. Don&#39;t propose &quot;empty&quot;, &quot;null&quot;, &quot;undefined&quot; as values.`,<br>          type: &quot;array&quot;,<br>          items: {<br>            description: &quot;Proposed input value&quot;,<br>            type: &quot;array|object|string|number&quot;,<br>          },<br>        },<br>      },<br>      additionalProperties: false,<br>    },<br>  };<br>  let res = g.generateContent({ jsonSchema });<br>  if (typeof res == &quot;string&quot;) {<br>    try {<br>      res = JSON.parse(res);<br>    } catch ({ stack }) {<br>      console.error(stack);<br>      return;<br>    }<br>  }<br>  const result = res.reduce((o, { functionName, inputValues }) =&gt; {<br>    try {<br>      o[functionName] = [];<br>      inputValues.forEach((input) =&gt; {<br>        const temp = JSON.parse(JSON.stringify(input));<br>        const output = functionObj[functionName](...temp);<br>        o[functionName].push({ input, output });<br>      });<br>    } catch ({ stack }) {<br>      console.log(stack);<br>    }<br>    return o;<br>  }, {});<br>  console.log(JSON.stringify(result));<br>}</pre><p>When this script is run, the following result is obtained.</p><pre>{<br>  &quot;splitArray&quot;: [<br>    { &quot;input&quot;: [[1, 2, 3, 4, 5, 6], 2], &quot;output&quot;: [[1, 2], [3, 4], [5, 6]] },<br>    { &quot;input&quot;: [[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;], 2], &quot;output&quot;: [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;], [&quot;e&quot;]] },<br>    { &quot;input&quot;: [[&quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;, &quot;banana&quot;, &quot;kiwi&quot;], 3], &quot;output&quot;: [[&quot;apple&quot;, &quot;orange&quot;, &quot;grape&quot;], [&quot;banana&quot;, &quot;kiwi&quot;]] },<br>    { &quot;input&quot;: [[true, false, true, false, true], 1], &quot;output&quot;: [[true], [false], [true], [false], [true]] },<br>    { &quot;input&quot;: [[1.2, 3.14, 2.71, 0.577], 2], &quot;output&quot;: [[1.2, 3.14], [2.71, 0.577]] }<br>  ]<br>}</pre><h3>Summary</h3><p>From the above result, we can confirm the possibility of reverse engineering using Gemini API. This also shows that Gemini API can be used to develop applications.</p><h3>Note</h3><ul><li>If an error occurs, please run the script again. Or, please adjust the description in the JSON schema.</li><li>I believe that this approach will be able to be also used for other languages except for Google Apps Script.</li><li>In the current stage, it seems that the class objects depending on Google Apps Script like SpreadsheetApp, DriveApp, and so on cannot be used as the input values.</li><li>The top abstract image was created by <a href="https://gemini.google.com/app">Gemini</a>.</li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2ee8789f01db" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/leveraging-gemini-1-5-api-for-automated-test-case-generation-reverse-engineering-2ee8789f01db">Leveraging Gemini 1.5 API for Automated Test Case Generation Reverse Engineering</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Using Google’s Gemini Function Calling to Fetch Real-Time Company News and Insights from External…]]></title>
            <link>https://medium.com/google-cloud/using-googles-gemini-function-calling-to-fetch-real-time-company-news-and-insights-from-external-d11b2da565e3?source=rss----e52cf94d98af---4</link>
            <guid isPermaLink="false">https://medium.com/p/d11b2da565e3</guid>
            <category><![CDATA[calling-function]]></category>
            <category><![CDATA[generative-ai]]></category>
            <category><![CDATA[google-cloud-platform]]></category>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[gemini]]></category>
            <dc:creator><![CDATA[Ishana Shinde]]></dc:creator>
            <pubDate>Thu, 09 May 2024 09:29:21 GMT</pubDate>
            <atom:updated>2024-05-09T09:29:21.687Z</atom:updated>
            <content:encoded><![CDATA[<h3>Using Google’s Gemini Function Calling to Fetch Real-Time Company News and Insights from External APIs</h3><p>In today’s fast-paced financial markets, professional and seasoned investors are constantly on the lookout for efficient ways to stay ahead. The sheer volume of financial data available can be overwhelming, but powerful generative models such as the <a href="https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/overview">Gemini model in Vertex AI</a> along with tool frameworks like <a href="https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling">Function Calling in Gemini</a> offer a promising solution. These tool frameworks not only automate the process of gathering financial insights but also revolutionizes the way investors can use generative models to interact with market data.</p><h3>Overview</h3><p>Function Calling is a native framework in Gemini that enables the generative model to call specific functions and perform tasks based on user prompts. It allows you to get output from the Gemini model in a structured way, trigger function calls that process data, retrieve information from external sources, or execute operations via API calls. This approach allows you to build AI agents that can perform complex workflows and opens up new possibilities for automation.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*vOZ_3hOAcKSo2wUaYNTqRw.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*DN0M1Sim-LMSCF892XZZOA.png" /></figure><p>When using Function Calling in Gemini, you can still communicate with Gemini through natural language prompts, which Gemini then transforms into structured data outputs. This interaction provides a flexible way to convert natural language into API calls that access real-time information from external APIs and quickly generate insights. Let’s dive into a use case that illustrates how this technology can streamline news and financial data analysis of various companies.</p><h3>The Investor’s Challenge</h3><p>Meet Jane! She’s a busy investor who’s always on the lookout for the latest market trends and financial news. She needs information quickly and accurately, but sifting through endless articles and reports is time-consuming.</p><p>Jane’s daily routine involves analyzing a flood of financial reports and market data to identify investment opportunities. By relying solely on Gemini, she faces significant challenges like frozen training data, making it difficult to access the latest market trends. Inconsistent responses further hinder her analysis, as the model struggles to provide accurate and relevant information consistently. Additionally, the limited functionality of generative models without function and tool framework prevents Jane from seamlessly integrating real-time data and executing complex financial calculations, leaving her with a fragmented and inefficient workflow.</p><h3>Discovering the Solution: Gemini Function Calling</h3><p>The breakthrough came when Jane discovered Function Calling in Gemini. This framework uses native functionality in the Gemini model to translate natural language into structured data that we can use to help the generative model integrate with external data sources and fetch tailored financial and company insights. It’s not just about speed; it’s about the relevance and precision of the information that we’re sending to the Gemini model to augment the knowledge it was trained on with real-time information from external systems.</p><p><strong>How Jane Uses Gemini Function Calling</strong></p><p>Here’s a look at how Jane uses Function Calling in Gemini to provide functions as tools to enhance her data analysis:</p><p><strong><em>Function Declaration</em></strong></p><pre>get_company_overview_func = FunctionDeclaration(<br>    name=&quot;get_company_overview&quot;,<br>    description=&quot;This function returns the company information, financial ratios, and other key metrics for the equity specified. Data is generally refreshed on the same day a company reports its latest earnings and financials.&quot;,<br>    parameters={<br>        &quot;type&quot;: &quot;object&quot;,<br>        &quot;properties&quot;: {&quot;ticker&quot;: {&quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The symbol of the ticker of your choice. For example: symbol=IBM&quot;}},<br>    },<br>)</pre><p>In this code snippet, Jane defines a function called get_company_overview. This function is designed to fetch essential company information, financial ratios, and key metrics for a specific stock ticker. The description provides a clear explanation of the function&#39;s purpose, while the parameters specify the required input (the stock ticker symbol).</p><p><strong><em>Prompt</em></strong></p><pre>Give me the company overview of Google?</pre><p>Jane poses a simple question to Gemini, requesting an overview of Google’s company information.</p><p><strong><em>API Call</em></strong></p><pre>def get_company_overview_from_api(content):<br>    url = f&#39;https://www.alphavantage.co/query?function=OVERVIEW&amp;symbol={content[&quot;ticker&quot;]}&amp;apikey=INSERT_YOUR_API_KEY&#39;<br>    api_response = requests.get(url)  # Get the JSON response from the external news sentiment API<br>    return api_response.text</pre><p>Behind the scenes, Gemini recognizes the intent of Jane’s query and triggers the get_company_overview function. This function, in turn, constructs a URL to query the Alpha Vantage API, replacing the placeholder {content[&quot;ticker&quot;]} with &quot;GOOG&quot; (the ticker symbol for Google). The API call fetches the relevant company data in JSON format.</p><p><strong><em>Gemini Response</em></strong></p><pre>## Google&#39;s Company Overview:<br>* **Alphabet Inc Class C (GOOG)** is a multinational technology conglomerate headquartered in Mountain View, California.<br>* It&#39;s the parent company of Google and several former Google subsidiaries.<br>* As of March 31, 2024, it boasts a market capitalization of over $2 trillion.<br>* Key financial ratios:<br>    * P/E Ratio: 25.39<br>    * PEG Ratio: 1.659<br>    * Price/Book Ratio: 6.99<br>* Recent performance:<br>    * Quarterly earnings growth year-over-year: 0.609<br>    * Quarterly revenue growth year-over-year: 0.154</pre><p>Gemini processes the JSON data received from the API and crafts a concise summary in natural language. This summary highlights key aspects of Google’s company overview, including its full name, market capitalization, financial ratios, and recent performance metrics.</p><p>As demonstrated in this example, Gemini Function Calling streamlines the process of accessing company information. By simply asking a question, Jane can instantly receive a comprehensive overview of Google’s financial standing, saving her valuable time and effort.</p><p><strong>Impact and Advancements</strong></p><p>Integrating Gemini Function Calling has significantly reduced the time Jane spends on company research, allowing her to focus more on strategic analysis and less on operational tasks. Since Jane was also able to build a web app and share it with her team, the tool’s efficiency in delivering real-time, actionable insights has notably improved her team’s responsiveness to market changes.</p><p><strong>Extend the Functionality</strong></p><p>You can take the above example and extend it to serve your own needs, including integrating different data sources or defining additional functions that the Gemini model can use as tools at runtime. These improvements could further refine data accuracy and expand its utility across different industries.</p><h3>Explore the Code</h3><p>If you’re interested in exploring Gemini Function Calling further, visit the <a href="https://github.com/GoogleCloudPlatform/generative-ai/blob/main/gemini/function-calling/use_case_company_news_and_insights.ipynb">GoogleCloudPlatform/generative-ai</a> code repository on GitHub to view and run the sample notebook.</p><h3>Conclusion</h3><p>Function Calling in Gemini offers a powerful way for generative models to interact with external systems and APIs to automate complex tasks. By integrating with external APIs, you can quickly retrieve the latest financial news and stock information, enabling faster and more informed decision-making.</p><p>Beyond mere automation, Function Calling ensures consistent and structured responses - eliminating the ambiguity and inconsistencies often associated with generative models. Developers gain full control in tailoring functions to specific financial tasks, such as real-time portfolio analysis or risk assessment. This powerful feature also augments generative models with real-time information from diverse sources, including databases, document repositories, and any other system accessible via an API.</p><p>Whether you’re a financial analyst, data scientist, or technology enthusiast, this approach can significantly streamline your workflow, improve accuracy, and unlock new possibilities in the way you access and process financial data.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d11b2da565e3" width="1" height="1" alt=""><hr><p><a href="https://medium.com/google-cloud/using-googles-gemini-function-calling-to-fetch-real-time-company-news-and-insights-from-external-d11b2da565e3">Using Google’s Gemini Function Calling to Fetch Real-Time Company News and Insights from External…</a> was originally published in <a href="https://medium.com/google-cloud">Google Cloud - Community</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>