<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:www.driftingruby.com,2005:/episodes/feed</id>
  <link rel="alternate" type="text/html" href="https://www.driftingruby.com"/>
  <link rel="self" type="application/atom+xml" href="https://www.driftingruby.com/"/>
  <title>Drifting Ruby Screencasts</title>
  <updated>2024-04-01T16:08:31Z</updated>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/456</id>
    <published>2024-04-01T00:00:00Z</published>
    <updated>2024-04-01T16:08:31Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/fart"/>
    <title>Fart</title>
    <content>Ever wonder how you could add audio to interactions on a website. In this episode, we'll explore adding sounds whenever someone clicks on a link or button.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/451</id>
    <published>2024-03-03T00:00:00Z</published>
    <updated>2024-03-13T07:04:47Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/streaming-llm-responses"/>
    <title>Streaming LLM Responses</title>
    <content>In this episode, we look at running a self hosted Large Language Model (LLM) and consuming it with a Rails application. We will use a background to make API requests to the LLM and then stream the responses in real-time to the browser.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/447</id>
    <published>2024-02-04T00:00:00Z</published>
    <updated>2024-02-13T19:15:07Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/campfire-patterns"/>
    <title>Campfire Patterns</title>
    <content>In this episode, we look at some of the design patterns that are used in Campfire and my take on why they took this approach. We'll explore some of the code organization, search functionality, and more!</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/445</id>
    <published>2024-01-24T00:00:00Z</published>
    <updated>2024-02-28T23:22:26Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/exploring-campfire"/>
    <title>Exploring Campfire</title>
    <content>In this episode, we explore the Campfire code from 37signals' Once product line. We'll install the product and grab the code base to get it up and running on our development environment.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/442</id>
    <published>2024-01-07T00:00:00Z</published>
    <updated>2024-03-23T16:21:33Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/turbo-8"/>
    <title>Turbo 8</title>
    <content>With Turbo 8 comes a lot of new features and in this episode, we'll explore an upgrading a blog post with comments to add in the new functionality.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/437</id>
    <published>2023-12-03T00:00:00Z</published>
    <updated>2024-01-25T04:20:21Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/hotkeys"/>
    <title>Hotkeys</title>
    <content>Keyboard shortcuts, or Hotkeys, can provide a great experience to users of an application. In this episode, we will use a stimulus wrapper around this library to use within our Ruby on Rails application.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/433</id>
    <published>2023-11-05T00:00:00Z</published>
    <updated>2024-02-16T21:21:38Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/detect-spam-with-ai"/>
    <title>Detect Spam with AI</title>
    <content>We can create a small python service that uses a Large Language Model (LLM) to detect if a message is spam or not. Using this service, we can tie it into our Rails application so that any comment created will be evaluated for being spam or not. We explore a few different routes on handling any messages flagged as spam.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/427</id>
    <published>2023-10-01T00:00:00Z</published>
    <updated>2023-12-16T05:16:42Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/embedding-stripe-checkout"/>
    <title>Embedding Stripe Checkout</title>
    <content>Stripe Checkout is one of my favorite ways to handle payments in Ruby on Rails applications. Stripe Checkouts will soon have an option to embed the Checkout into your web application. In this episode, we'll look at implementing this feature with a StimulusJS controller.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/423</id>
    <published>2023-09-06T00:00:00Z</published>
    <updated>2024-01-25T04:20:15Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/i-m-a-teapot"/>
    <title>I'm a teapot</title>
    <content>A special release to celebrate 418 episodes. I talk about different HTTP response codes.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
  <entry>
    <id>tag:www.driftingruby.com,2005:Episode/422</id>
    <published>2023-09-03T00:00:00Z</published>
    <updated>2023-12-14T10:17:10Z</updated>
    <link rel="alternate" type="text/html" href="https://www.driftingruby.com/episodes/system-tests"/>
    <title>System Tests</title>
    <content>In this episode, we look at adding system tests in our application to test our Stimulus Controllers. We'll also look at how to DRY up some of the tests and how to run them in a headless environment.</content>
    <author>
      <name>Dave Kimura</name>
      <email>support@driftingruby.com</email>
    </author>
  </entry>
</feed>
